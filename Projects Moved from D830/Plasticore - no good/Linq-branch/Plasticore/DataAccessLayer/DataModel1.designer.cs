#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Plasticore.DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PlastiBase")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountInformation(AccountInformation instance);
    partial void UpdateAccountInformation(AccountInformation instance);
    partial void DeleteAccountInformation(AccountInformation instance);
    partial void InsertRfq(Rfq instance);
    partial void UpdateRfq(Rfq instance);
    partial void DeleteRfq(Rfq instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertCondition(Condition instance);
    partial void UpdateCondition(Condition instance);
    partial void DeleteCondition(Condition instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertDeliveryInformation(DeliveryInformation instance);
    partial void UpdateDeliveryInformation(DeliveryInformation instance);
    partial void DeleteDeliveryInformation(DeliveryInformation instance);
    partial void InsertQuantityMatrix(QuantityMatrix instance);
    partial void UpdateQuantityMatrix(QuantityMatrix instance);
    partial void DeleteQuantityMatrix(QuantityMatrix instance);
    partial void InsertQuote(Quote instance);
    partial void UpdateQuote(Quote instance);
    partial void DeleteQuote(Quote instance);
    partial void InsertRequisitionItem(RequisitionItem instance);
    partial void UpdateRequisitionItem(RequisitionItem instance);
    partial void DeleteRequisitionItem(RequisitionItem instance);
    partial void InsertChemicalAdditive(ChemicalAdditive instance);
    partial void UpdateChemicalAdditive(ChemicalAdditive instance);
    partial void DeleteChemicalAdditive(ChemicalAdditive instance);
    partial void InsertColorInfo(ColorInfo instance);
    partial void UpdateColorInfo(ColorInfo instance);
    partial void DeleteColorInfo(ColorInfo instance);
    partial void InsertFoldingInfo(FoldingInfo instance);
    partial void UpdateFoldingInfo(FoldingInfo instance);
    partial void DeleteFoldingInfo(FoldingInfo instance);
    partial void InsertGauge(Gauge instance);
    partial void UpdateGauge(Gauge instance);
    partial void DeleteGauge(Gauge instance);
    partial void InsertGusset(Gusset instance);
    partial void UpdateGusset(Gusset instance);
    partial void DeleteGusset(Gusset instance);
    partial void InsertHole(Hole instance);
    partial void UpdateHole(Hole instance);
    partial void DeleteHole(Hole instance);
    partial void InsertLipHood(LipHood instance);
    partial void UpdateLipHood(LipHood instance);
    partial void DeleteLipHood(LipHood instance);
    partial void InsertMicrovent(Microvent instance);
    partial void UpdateMicrovent(Microvent instance);
    partial void DeleteMicrovent(Microvent instance);
    partial void InsertPackaging(Packaging instance);
    partial void UpdatePackaging(Packaging instance);
    partial void DeletePackaging(Packaging instance);
    partial void InsertPrintingInfo(PrintingInfo instance);
    partial void UpdatePrintingInfo(PrintingInfo instance);
    partial void DeletePrintingInfo(PrintingInfo instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    #endregion
		
		public DataModelDataContext() : 
				base(global::Plasticore.Properties.Settings.Default.PlastiBaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountInformation> AccountInformations
		{
			get
			{
				return this.GetTable<AccountInformation>();
			}
		}
		
		public System.Data.Linq.Table<Rfq> Rfqs
		{
			get
			{
				return this.GetTable<Rfq>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Condition> Conditions
		{
			get
			{
				return this.GetTable<Condition>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryInformation> DeliveryInformations
		{
			get
			{
				return this.GetTable<DeliveryInformation>();
			}
		}
		
		public System.Data.Linq.Table<QuantityMatrix> QuantityMatrixes
		{
			get
			{
				return this.GetTable<QuantityMatrix>();
			}
		}
		
		public System.Data.Linq.Table<Quote> Quotes
		{
			get
			{
				return this.GetTable<Quote>();
			}
		}
		
		public System.Data.Linq.Table<RequisitionItem> RequisitionItems
		{
			get
			{
				return this.GetTable<RequisitionItem>();
			}
		}
		
		public System.Data.Linq.Table<ChemicalAdditive> ChemicalAdditives
		{
			get
			{
				return this.GetTable<ChemicalAdditive>();
			}
		}
		
		public System.Data.Linq.Table<ColorInfo> ColorInfos
		{
			get
			{
				return this.GetTable<ColorInfo>();
			}
		}
		
		public System.Data.Linq.Table<FoldingInfo> FoldingInfos
		{
			get
			{
				return this.GetTable<FoldingInfo>();
			}
		}
		
		public System.Data.Linq.Table<Gauge> Gauges
		{
			get
			{
				return this.GetTable<Gauge>();
			}
		}
		
		public System.Data.Linq.Table<Gusset> Gussets
		{
			get
			{
				return this.GetTable<Gusset>();
			}
		}
		
		public System.Data.Linq.Table<Hole> Holes
		{
			get
			{
				return this.GetTable<Hole>();
			}
		}
		
		public System.Data.Linq.Table<LipHood> LipHoods
		{
			get
			{
				return this.GetTable<LipHood>();
			}
		}
		
		public System.Data.Linq.Table<Microvent> Microvents
		{
			get
			{
				return this.GetTable<Microvent>();
			}
		}
		
		public System.Data.Linq.Table<Packaging> Packagings
		{
			get
			{
				return this.GetTable<Packaging>();
			}
		}
		
		public System.Data.Linq.Table<PrintingInfo> PrintingInfos
		{
			get
			{
				return this.GetTable<PrintingInfo>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountInformation")]
	public partial class AccountInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContactId;
		
		private int _BillingAddressId;
		
		private int @__DefaultCurrency;
		
		private EntityRef<Rfq> _Rfq;
		
		private EntitySet<Quote> _Quotes;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnBillingAddressIdChanging(int value);
    partial void OnBillingAddressIdChanged();
    partial void On_DefaultCurrencyChanging(int value);
    partial void On_DefaultCurrencyChanged();
    #endregion
		
		public AccountInformation()
		{
			this._Rfq = default(EntityRef<Rfq>);
			this._Quotes = new EntitySet<Quote>(new Action<Quote>(this.attach_Quotes), new Action<Quote>(this.detach_Quotes));
			this._Address = default(EntityRef<Address>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int NOT NULL")]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddressId", DbType="Int NOT NULL")]
		public int BillingAddressId
		{
			get
			{
				return this._BillingAddressId;
			}
			set
			{
				if ((this._BillingAddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingAddressIdChanging(value);
					this.SendPropertyChanging();
					this._BillingAddressId = value;
					this.SendPropertyChanged("BillingAddressId");
					this.OnBillingAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_DefaultCurrency]", Storage="__DefaultCurrency", DbType="Int NOT NULL")]
		public int _DefaultCurrency
		{
			get
			{
				return this.@__DefaultCurrency;
			}
			set
			{
				if ((this.@__DefaultCurrency != value))
				{
					this.On_DefaultCurrencyChanging(value);
					this.SendPropertyChanging();
					this.@__DefaultCurrency = value;
					this.SendPropertyChanged("_DefaultCurrency");
					this.On_DefaultCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountInformation_Rfq", Storage="_Rfq", ThisKey="ID", OtherKey="BuyerAccountInformationId", IsUnique=true, IsForeignKey=false)]
		public Rfq Rfq
		{
			get
			{
				return this._Rfq.Entity;
			}
			set
			{
				Rfq previousValue = this._Rfq.Entity;
				if (((previousValue != value) 
							|| (this._Rfq.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rfq.Entity = null;
						previousValue.AccountInformation = null;
					}
					this._Rfq.Entity = value;
					if ((value != null))
					{
						value.AccountInformation = this;
					}
					this.SendPropertyChanged("Rfq");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountInformation_Quote", Storage="_Quotes", ThisKey="ID", OtherKey="SellerAccountInformationId")]
		public EntitySet<Quote> Quotes
		{
			get
			{
				return this._Quotes;
			}
			set
			{
				this._Quotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_AccountInformation", Storage="_Address", ThisKey="BillingAddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.AccountInformation = null;
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.AccountInformation = this;
						this._BillingAddressId = value.Id;
					}
					else
					{
						this._BillingAddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_AccountInformation", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.AccountInformation = null;
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.AccountInformation = this;
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.AccountInformation = this;
		}
		
		private void detach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.AccountInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rfq")]
	public partial class Rfq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int @__Type;
		
		private int _BuyerAccountNumber;
		
		private int _BuyerAccountInformationId;
		
		private System.DateTime _Deadline;
		
		private string _RfqNumber;
		
		private EntitySet<Quote> _Quotes;
		
		private EntitySet<RfqItem> _RfqItems;
		
		private EntityRef<AccountInformation> _AccountInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void On_TypeChanging(int value);
    partial void On_TypeChanged();
    partial void OnBuyerAccountNumberChanging(int value);
    partial void OnBuyerAccountNumberChanged();
    partial void OnBuyerAccountInformationIdChanging(int value);
    partial void OnBuyerAccountInformationIdChanged();
    partial void OnDeadlineChanging(System.DateTime value);
    partial void OnDeadlineChanged();
    partial void OnRfqNumberChanging(string value);
    partial void OnRfqNumberChanged();
    #endregion
		
		public Rfq()
		{
			this._Quotes = new EntitySet<Quote>(new Action<Quote>(this.attach_Quotes), new Action<Quote>(this.detach_Quotes));
			this._RfqItems = new EntitySet<RfqItem>(new Action<RfqItem>(this.attach_RfqItems), new Action<RfqItem>(this.detach_RfqItems));
			this._AccountInformation = default(EntityRef<AccountInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Type]", Storage="__Type", DbType="Int NOT NULL")]
		public int _Type
		{
			get
			{
				return this.@__Type;
			}
			set
			{
				if ((this.@__Type != value))
				{
					this.On_TypeChanging(value);
					this.SendPropertyChanging();
					this.@__Type = value;
					this.SendPropertyChanged("_Type");
					this.On_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerAccountNumber", DbType="Int NOT NULL")]
		public int BuyerAccountNumber
		{
			get
			{
				return this._BuyerAccountNumber;
			}
			set
			{
				if ((this._BuyerAccountNumber != value))
				{
					this.OnBuyerAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._BuyerAccountNumber = value;
					this.SendPropertyChanged("BuyerAccountNumber");
					this.OnBuyerAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerAccountInformationId", DbType="Int NOT NULL")]
		public int BuyerAccountInformationId
		{
			get
			{
				return this._BuyerAccountInformationId;
			}
			set
			{
				if ((this._BuyerAccountInformationId != value))
				{
					if (this._AccountInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerAccountInformationIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerAccountInformationId = value;
					this.SendPropertyChanged("BuyerAccountInformationId");
					this.OnBuyerAccountInformationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deadline", DbType="DateTime NOT NULL")]
		public System.DateTime Deadline
		{
			get
			{
				return this._Deadline;
			}
			set
			{
				if ((this._Deadline != value))
				{
					this.OnDeadlineChanging(value);
					this.SendPropertyChanging();
					this._Deadline = value;
					this.SendPropertyChanged("Deadline");
					this.OnDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RfqNumber", DbType="VARCHAR(10) NOT NULL", CanBeNull=false)]
		public string RfqNumber
		{
			get
			{
				return this._RfqNumber;
			}
			set
			{
				if ((this._RfqNumber != value))
				{
					this.OnRfqNumberChanging(value);
					this.SendPropertyChanging();
					this._RfqNumber = value;
					this.SendPropertyChanged("RfqNumber");
					this.OnRfqNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rfq_Quote", Storage="_Quotes", ThisKey="Id", OtherKey="RfqId")]
		public EntitySet<Quote> Quotes
		{
			get
			{
				return this._Quotes;
			}
			set
			{
				this._Quotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rfq_RfqItem", Storage="_RfqItems", ThisKey="Id", OtherKey="RfqId")]
		public EntitySet<RfqItem> RfqItems
		{
			get
			{
				return this._RfqItems;
			}
			set
			{
				this._RfqItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountInformation_Rfq", Storage="_AccountInformation", ThisKey="BuyerAccountInformationId", OtherKey="ID", IsForeignKey=true)]
		public AccountInformation AccountInformation
		{
			get
			{
				return this._AccountInformation.Entity;
			}
			set
			{
				AccountInformation previousValue = this._AccountInformation.Entity;
				if (((previousValue != value) 
							|| (this._AccountInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountInformation.Entity = null;
						previousValue.Rfq = null;
					}
					this._AccountInformation.Entity = value;
					if ((value != null))
					{
						value.Rfq = this;
						this._BuyerAccountInformationId = value.ID;
					}
					else
					{
						this._BuyerAccountInformationId = default(int);
					}
					this.SendPropertyChanged("AccountInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.Rfq = this;
		}
		
		private void detach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.Rfq = null;
		}
		
		private void attach_RfqItems(RfqItem entity)
		{
			this.SendPropertyChanging();
			entity.Rfq = this;
		}
		
		private void detach_RfqItems(RfqItem entity)
		{
			this.SendPropertyChanging();
			entity.Rfq = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _City;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _Province;
		
		private string _PostalCode;
		
		private int @__Country;
		
		private EntityRef<AccountInformation> _AccountInformation;
		
		private EntityRef<DeliveryInformation> _DeliveryInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void On_CountryChanging(int value);
    partial void On_CountryChanged();
    #endregion
		
		public Address()
		{
			this._AccountInformation = default(EntityRef<AccountInformation>);
			this._DeliveryInformation = default(EntityRef<DeliveryInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="VarChar(50)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Country]", Storage="__Country", DbType="Int NOT NULL")]
		public int _Country
		{
			get
			{
				return this.@__Country;
			}
			set
			{
				if ((this.@__Country != value))
				{
					this.On_CountryChanging(value);
					this.SendPropertyChanging();
					this.@__Country = value;
					this.SendPropertyChanged("_Country");
					this.On_CountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_AccountInformation", Storage="_AccountInformation", ThisKey="Id", OtherKey="BillingAddressId", IsUnique=true, IsForeignKey=false)]
		public AccountInformation AccountInformation
		{
			get
			{
				return this._AccountInformation.Entity;
			}
			set
			{
				AccountInformation previousValue = this._AccountInformation.Entity;
				if (((previousValue != value) 
							|| (this._AccountInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountInformation.Entity = null;
						previousValue.Address = null;
					}
					this._AccountInformation.Entity = value;
					if ((value != null))
					{
						value.Address = this;
					}
					this.SendPropertyChanged("AccountInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_DeliveryInformation", Storage="_DeliveryInformation", ThisKey="Id", OtherKey="DestinationAddressId", IsUnique=true, IsForeignKey=false)]
		public DeliveryInformation DeliveryInformation
		{
			get
			{
				return this._DeliveryInformation.Entity;
			}
			set
			{
				DeliveryInformation previousValue = this._DeliveryInformation.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryInformation.Entity = null;
						previousValue.Address = null;
					}
					this._DeliveryInformation.Entity = value;
					if ((value != null))
					{
						value.Address = this;
					}
					this.SendPropertyChanged("DeliveryInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Condition")]
	public partial class Condition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RequisitionItemId;
		
		private int @__AuthorType;
		
		private string _Description;
		
		private System.Nullable<bool> _Accepted;
		
		private EntityRef<RequisitionItem> _RequisitionItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRequisitionItemIdChanging(int value);
    partial void OnRequisitionItemIdChanged();
    partial void On_AuthorTypeChanging(int value);
    partial void On_AuthorTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAcceptedChanging(System.Nullable<bool> value);
    partial void OnAcceptedChanged();
    #endregion
		
		public Condition()
		{
			this._RequisitionItem = default(EntityRef<RequisitionItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequisitionItemId", DbType="Int NOT NULL")]
		public int RequisitionItemId
		{
			get
			{
				return this._RequisitionItemId;
			}
			set
			{
				if ((this._RequisitionItemId != value))
				{
					if (this._RequisitionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequisitionItemIdChanging(value);
					this.SendPropertyChanging();
					this._RequisitionItemId = value;
					this.SendPropertyChanged("RequisitionItemId");
					this.OnRequisitionItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_AuthorType]", Storage="__AuthorType", DbType="Int NOT NULL")]
		public int _AuthorType
		{
			get
			{
				return this.@__AuthorType;
			}
			set
			{
				if ((this.@__AuthorType != value))
				{
					this.On_AuthorTypeChanging(value);
					this.SendPropertyChanging();
					this.@__AuthorType = value;
					this.SendPropertyChanged("_AuthorType");
					this.On_AuthorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accepted", DbType="Bit")]
		public System.Nullable<bool> Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this.OnAcceptedChanging(value);
					this.SendPropertyChanging();
					this._Accepted = value;
					this.SendPropertyChanged("Accepted");
					this.OnAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequisitionItem_Condition", Storage="_RequisitionItem", ThisKey="RequisitionItemId", OtherKey="Id", IsForeignKey=true)]
		public RequisitionItem RequisitionItem
		{
			get
			{
				return this._RequisitionItem.Entity;
			}
			set
			{
				RequisitionItem previousValue = this._RequisitionItem.Entity;
				if (((previousValue != value) 
							|| (this._RequisitionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequisitionItem.Entity = null;
						previousValue.Conditions.Remove(this);
					}
					this._RequisitionItem.Entity = value;
					if ((value != null))
					{
						value.Conditions.Add(this);
						this._RequisitionItemId = value.Id;
					}
					else
					{
						this._RequisitionItemId = default(int);
					}
					this.SendPropertyChanged("RequisitionItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullName;
		
		private string _PhoneNumber;
		
		private string _FaxNumber;
		
		private string _Email;
		
		private int @__Ddt;
		
		private string _AdditionalComment;
		
		private EntityRef<AccountInformation> _AccountInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnFaxNumberChanging(string value);
    partial void OnFaxNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void On_DdtChanging(int value);
    partial void On_DdtChanged();
    partial void OnAdditionalCommentChanging(string value);
    partial void OnAdditionalCommentChanged();
    #endregion
		
		public Contact()
		{
			this._AccountInformation = default(EntityRef<AccountInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNumber", DbType="VarChar(20)")]
		public string FaxNumber
		{
			get
			{
				return this._FaxNumber;
			}
			set
			{
				if ((this._FaxNumber != value))
				{
					this.OnFaxNumberChanging(value);
					this.SendPropertyChanging();
					this._FaxNumber = value;
					this.SendPropertyChanged("FaxNumber");
					this.OnFaxNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Ddt]", Storage="__Ddt", DbType="Int")]
		public int _Ddt
		{
			get
			{
				return this.@__Ddt;
			}
			set
			{
				if ((this.@__Ddt != value))
				{
					this.On_DdtChanging(value);
					this.SendPropertyChanging();
					this.@__Ddt = value;
					this.SendPropertyChanged("_Ddt");
					this.On_DdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalComment", DbType="VarChar(1000)")]
		public string AdditionalComment
		{
			get
			{
				return this._AdditionalComment;
			}
			set
			{
				if ((this._AdditionalComment != value))
				{
					this.OnAdditionalCommentChanging(value);
					this.SendPropertyChanging();
					this._AdditionalComment = value;
					this.SendPropertyChanged("AdditionalComment");
					this.OnAdditionalCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_AccountInformation", Storage="_AccountInformation", ThisKey="Id", OtherKey="ContactId", IsUnique=true, IsForeignKey=false)]
		public AccountInformation AccountInformation
		{
			get
			{
				return this._AccountInformation.Entity;
			}
			set
			{
				AccountInformation previousValue = this._AccountInformation.Entity;
				if (((previousValue != value) 
							|| (this._AccountInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountInformation.Entity = null;
						previousValue.Contact = null;
					}
					this._AccountInformation.Entity = value;
					if ((value != null))
					{
						value.Contact = this;
					}
					this.SendPropertyChanged("AccountInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeliveryInformation")]
	public partial class DeliveryInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _RequestedDeliveryDate;
		
		private int @__FOB;
		
		private System.Nullable<int> _DestinationAddressId;
		
		private EntitySet<RfqItem> _RfqItems;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRequestedDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestedDeliveryDateChanged();
    partial void On_FOBChanging(int value);
    partial void On_FOBChanged();
    partial void OnDestinationAddressIdChanging(System.Nullable<int> value);
    partial void OnDestinationAddressIdChanged();
    #endregion
		
		public DeliveryInformation()
		{
			this._RfqItems = new EntitySet<RfqItem>(new Action<RfqItem>(this.attach_RfqItems), new Action<RfqItem>(this.detach_RfqItems));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedDeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestedDeliveryDate
		{
			get
			{
				return this._RequestedDeliveryDate;
			}
			set
			{
				if ((this._RequestedDeliveryDate != value))
				{
					this.OnRequestedDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._RequestedDeliveryDate = value;
					this.SendPropertyChanged("RequestedDeliveryDate");
					this.OnRequestedDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_FOB]", Storage="__FOB", DbType="Int")]
		public int _FOB
		{
			get
			{
				return this.@__FOB;
			}
			set
			{
				if ((this.@__FOB != value))
				{
					this.On_FOBChanging(value);
					this.SendPropertyChanging();
					this.@__FOB = value;
					this.SendPropertyChanged("_FOB");
					this.On_FOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationAddressId", DbType="Int")]
		public System.Nullable<int> DestinationAddressId
		{
			get
			{
				return this._DestinationAddressId;
			}
			set
			{
				if ((this._DestinationAddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationAddressIdChanging(value);
					this.SendPropertyChanging();
					this._DestinationAddressId = value;
					this.SendPropertyChanged("DestinationAddressId");
					this.OnDestinationAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryInformation_RfqItem", Storage="_RfqItems", ThisKey="Id", OtherKey="DeliveryInformationId")]
		public EntitySet<RfqItem> RfqItems
		{
			get
			{
				return this._RfqItems;
			}
			set
			{
				this._RfqItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_DeliveryInformation", Storage="_Address", ThisKey="DestinationAddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.DeliveryInformation = null;
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.DeliveryInformation = this;
						this._DestinationAddressId = value.Id;
					}
					else
					{
						this._DestinationAddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RfqItems(RfqItem entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryInformation = this;
		}
		
		private void detach_RfqItems(RfqItem entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuantityMatrix")]
	public partial class QuantityMatrix : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RequisitionItemId;
		
		private int @__QauntityType;
		
		private int _Figure;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private EntityRef<RequisitionItem> _RequisitionItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRequisitionItemIdChanging(int value);
    partial void OnRequisitionItemIdChanged();
    partial void On_QauntityTypeChanging(int value);
    partial void On_QauntityTypeChanged();
    partial void OnFigureChanging(int value);
    partial void OnFigureChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public QuantityMatrix()
		{
			this._RequisitionItem = default(EntityRef<RequisitionItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequisitionItemId", DbType="Int NOT NULL")]
		public int RequisitionItemId
		{
			get
			{
				return this._RequisitionItemId;
			}
			set
			{
				if ((this._RequisitionItemId != value))
				{
					if (this._RequisitionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequisitionItemIdChanging(value);
					this.SendPropertyChanging();
					this._RequisitionItemId = value;
					this.SendPropertyChanged("RequisitionItemId");
					this.OnRequisitionItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_QauntityType]", Storage="__QauntityType", DbType="Int NOT NULL")]
		public int _QauntityType
		{
			get
			{
				return this.@__QauntityType;
			}
			set
			{
				if ((this.@__QauntityType != value))
				{
					this.On_QauntityTypeChanging(value);
					this.SendPropertyChanging();
					this.@__QauntityType = value;
					this.SendPropertyChanged("_QauntityType");
					this.On_QauntityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Figure", DbType="Int NOT NULL")]
		public int Figure
		{
			get
			{
				return this._Figure;
			}
			set
			{
				if ((this._Figure != value))
				{
					this.OnFigureChanging(value);
					this.SendPropertyChanging();
					this._Figure = value;
					this.SendPropertyChanged("Figure");
					this.OnFigureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequisitionItem_QuantityMatrix", Storage="_RequisitionItem", ThisKey="RequisitionItemId", OtherKey="Id", IsForeignKey=true)]
		public RequisitionItem RequisitionItem
		{
			get
			{
				return this._RequisitionItem.Entity;
			}
			set
			{
				RequisitionItem previousValue = this._RequisitionItem.Entity;
				if (((previousValue != value) 
							|| (this._RequisitionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequisitionItem.Entity = null;
						previousValue.QuantityMatrixes.Remove(this);
					}
					this._RequisitionItem.Entity = value;
					if ((value != null))
					{
						value.QuantityMatrixes.Add(this);
						this._RequisitionItemId = value.Id;
					}
					else
					{
						this._RequisitionItemId = default(int);
					}
					this.SendPropertyChanged("RequisitionItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quote")]
	public partial class Quote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RfqId;
		
		private int _SellerAccountNumber;
		
		private int _SellerAccountInformationId;
		
		private string _QuoteNumber;
		
		private EntitySet<QuoteItem> _QuoteItems;
		
		private EntityRef<AccountInformation> _AccountInformation;
		
		private EntityRef<Rfq> _Rfq;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRfqIdChanging(int value);
    partial void OnRfqIdChanged();
    partial void OnSellerAccountNumberChanging(int value);
    partial void OnSellerAccountNumberChanged();
    partial void OnSellerAccountInformationIdChanging(int value);
    partial void OnSellerAccountInformationIdChanged();
    partial void OnQuoteNumberChanging(string value);
    partial void OnQuoteNumberChanged();
    #endregion
		
		public Quote()
		{
			this._QuoteItems = new EntitySet<QuoteItem>(new Action<QuoteItem>(this.attach_QuoteItems), new Action<QuoteItem>(this.detach_QuoteItems));
			this._AccountInformation = default(EntityRef<AccountInformation>);
			this._Rfq = default(EntityRef<Rfq>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RequisitionId", Storage="_RfqId", DbType="Int NOT NULL")]
		public int RfqId
		{
			get
			{
				return this._RfqId;
			}
			set
			{
				if ((this._RfqId != value))
				{
					this.OnRfqIdChanging(value);
					this.SendPropertyChanging();
					this._RfqId = value;
					this.SendPropertyChanged("RfqId");
					this.OnRfqIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerAccountNumber", DbType="Int NOT NULL")]
		public int SellerAccountNumber
		{
			get
			{
				return this._SellerAccountNumber;
			}
			set
			{
				if ((this._SellerAccountNumber != value))
				{
					this.OnSellerAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._SellerAccountNumber = value;
					this.SendPropertyChanged("SellerAccountNumber");
					this.OnSellerAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerAccountInformationId", DbType="Int NOT NULL")]
		public int SellerAccountInformationId
		{
			get
			{
				return this._SellerAccountInformationId;
			}
			set
			{
				if ((this._SellerAccountInformationId != value))
				{
					if (this._AccountInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerAccountInformationIdChanging(value);
					this.SendPropertyChanging();
					this._SellerAccountInformationId = value;
					this.SendPropertyChanged("SellerAccountInformationId");
					this.OnSellerAccountInformationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteNumber", DbType="VARCHAR(10) NOT NULL", CanBeNull=false)]
		public string QuoteNumber
		{
			get
			{
				return this._QuoteNumber;
			}
			set
			{
				if ((this._QuoteNumber != value))
				{
					this.OnQuoteNumberChanging(value);
					this.SendPropertyChanging();
					this._QuoteNumber = value;
					this.SendPropertyChanged("QuoteNumber");
					this.OnQuoteNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quote_QuoteItem", Storage="_QuoteItems", ThisKey="Id", OtherKey="QuoteId")]
		public EntitySet<QuoteItem> QuoteItems
		{
			get
			{
				return this._QuoteItems;
			}
			set
			{
				this._QuoteItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountInformation_Quote", Storage="_AccountInformation", ThisKey="SellerAccountInformationId", OtherKey="ID", IsForeignKey=true)]
		public AccountInformation AccountInformation
		{
			get
			{
				return this._AccountInformation.Entity;
			}
			set
			{
				AccountInformation previousValue = this._AccountInformation.Entity;
				if (((previousValue != value) 
							|| (this._AccountInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountInformation.Entity = null;
						previousValue.Quotes.Remove(this);
					}
					this._AccountInformation.Entity = value;
					if ((value != null))
					{
						value.Quotes.Add(this);
						this._SellerAccountInformationId = value.ID;
					}
					else
					{
						this._SellerAccountInformationId = default(int);
					}
					this.SendPropertyChanged("AccountInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rfq_Quote", Storage="_Rfq", ThisKey="RfqId", OtherKey="Id", IsForeignKey=true)]
		public Rfq Rfq
		{
			get
			{
				return this._Rfq.Entity;
			}
			set
			{
				Rfq previousValue = this._Rfq.Entity;
				if (((previousValue != value) 
							|| (this._Rfq.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rfq.Entity = null;
						previousValue.Quotes.Remove(this);
					}
					this._Rfq.Entity = value;
					if ((value != null))
					{
						value.Quotes.Add(this);
						this._RfqId = value.Id;
					}
					else
					{
						this._RfqId = default(int);
					}
					this.SendPropertyChanged("Rfq");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuoteItems(QuoteItem entity)
		{
			this.SendPropertyChanging();
			entity.Quote = this;
		}
		
		private void detach_QuoteItems(QuoteItem entity)
		{
			this.SendPropertyChanging();
			entity.Quote = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequisitionItem")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="0", Type=typeof(RfqItem))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="1", Type=typeof(QuoteItem))]
	public abstract partial class RequisitionItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		protected int _Id;
		
		private int @__Type;
		
		private int _ItemNo;
		
		private EntitySet<Condition> _Conditions;
		
		private EntitySet<QuantityMatrix> _QuantityMatrixes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void On_TypeChanging(int value);
    partial void On_TypeChanged();
    partial void OnItemNoChanging(int value);
    partial void OnItemNoChanged();
    #endregion
		
		public RequisitionItem()
		{
			this._Conditions = new EntitySet<Condition>(new Action<Condition>(this.attach_Conditions), new Action<Condition>(this.detach_Conditions));
			this._QuantityMatrixes = new EntitySet<QuantityMatrix>(new Action<QuantityMatrix>(this.attach_QuantityMatrixes), new Action<QuantityMatrix>(this.detach_QuantityMatrixes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Type]", Storage="__Type", DbType="Int NOT NULL", IsDiscriminator=true)]
		public int _Type
		{
			get
			{
				return this.@__Type;
			}
			set
			{
				if ((this.@__Type != value))
				{
					this.On_TypeChanging(value);
					this.SendPropertyChanging();
					this.@__Type = value;
					this.SendPropertyChanged("_Type");
					this.On_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNo", DbType="Int NOT NULL")]
		public int ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequisitionItem_Condition", Storage="_Conditions", ThisKey="Id", OtherKey="RequisitionItemId")]
		public EntitySet<Condition> Conditions
		{
			get
			{
				return this._Conditions;
			}
			set
			{
				this._Conditions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequisitionItem_QuantityMatrix", Storage="_QuantityMatrixes", ThisKey="Id", OtherKey="RequisitionItemId")]
		public EntitySet<QuantityMatrix> QuantityMatrixes
		{
			get
			{
				return this._QuantityMatrixes;
			}
			set
			{
				this._QuantityMatrixes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conditions(Condition entity)
		{
			this.SendPropertyChanging();
			entity.RequisitionItem = this;
		}
		
		private void detach_Conditions(Condition entity)
		{
			this.SendPropertyChanging();
			entity.RequisitionItem = null;
		}
		
		private void attach_QuantityMatrixes(QuantityMatrix entity)
		{
			this.SendPropertyChanging();
			entity.RequisitionItem = this;
		}
		
		private void detach_QuantityMatrixes(QuantityMatrix entity)
		{
			this.SendPropertyChanging();
			entity.RequisitionItem = null;
		}
	}
	
	public partial class RfqItem : RequisitionItem
	{
		
		private int _Id;
		
		private int _RfqId;
		
		private System.Nullable<int> _NumberOfReleases;
		
		private System.Nullable<int> _ReleasePeriod;
		
		private System.Nullable<int> _DeliveryInformationId;
		
		private int _ProductId;
		
		private EntitySet<QuoteItem> _QuoteItems;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<DeliveryInformation> _DeliveryInformation;
		
		private EntityRef<Rfq> _Rfq;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRfqIdChanging(int value);
    partial void OnRfqIdChanged();
    partial void OnNumberOfReleasesChanging(System.Nullable<int> value);
    partial void OnNumberOfReleasesChanged();
    partial void OnReleasePeriodChanging(System.Nullable<int> value);
    partial void OnReleasePeriodChanged();
    partial void OnDeliveryInformationIdChanging(System.Nullable<int> value);
    partial void OnDeliveryInformationIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    #endregion
		
		public RfqItem()
		{
			this._QuoteItems = new EntitySet<QuoteItem>(new Action<QuoteItem>(this.attach_QuoteItems), new Action<QuoteItem>(this.detach_QuoteItems));
			this._Product = default(EntityRef<Product>);
			this._DeliveryInformation = default(EntityRef<DeliveryInformation>);
			this._Rfq = default(EntityRef<Rfq>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RfqId", DbType="Int NOT NULL")]
		public int RfqId
		{
			get
			{
				return this._RfqId;
			}
			set
			{
				if ((this._RfqId != value))
				{
					if (this._Rfq.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRfqIdChanging(value);
					this.SendPropertyChanging();
					this._RfqId = value;
					this.SendPropertyChanged("RfqId");
					this.OnRfqIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfReleases", DbType="Int")]
		public System.Nullable<int> NumberOfReleases
		{
			get
			{
				return this._NumberOfReleases;
			}
			set
			{
				if ((this._NumberOfReleases != value))
				{
					this.OnNumberOfReleasesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfReleases = value;
					this.SendPropertyChanged("NumberOfReleases");
					this.OnNumberOfReleasesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleasePeriod", DbType="Int")]
		public System.Nullable<int> ReleasePeriod
		{
			get
			{
				return this._ReleasePeriod;
			}
			set
			{
				if ((this._ReleasePeriod != value))
				{
					this.OnReleasePeriodChanging(value);
					this.SendPropertyChanging();
					this._ReleasePeriod = value;
					this.SendPropertyChanged("ReleasePeriod");
					this.OnReleasePeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryInformationId", DbType="Int")]
		public System.Nullable<int> DeliveryInformationId
		{
			get
			{
				return this._DeliveryInformationId;
			}
			set
			{
				if ((this._DeliveryInformationId != value))
				{
					if (this._DeliveryInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryInformationIdChanging(value);
					this.SendPropertyChanging();
					this._DeliveryInformationId = value;
					this.SendPropertyChanged("DeliveryInformationId");
					this.OnDeliveryInformationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="INT")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RfqItem_QuoteItem", Storage="_QuoteItems", ThisKey="Id", OtherKey="RfqItemId")]
		public EntitySet<QuoteItem> QuoteItems
		{
			get
			{
				return this._QuoteItems;
			}
			set
			{
				this._QuoteItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RfqItem_Product", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.RfqItem = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.RfqItem = this;
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryInformation_RfqItem", Storage="_DeliveryInformation", ThisKey="DeliveryInformationId", OtherKey="Id", IsForeignKey=true)]
		public DeliveryInformation DeliveryInformation
		{
			get
			{
				return this._DeliveryInformation.Entity;
			}
			set
			{
				DeliveryInformation previousValue = this._DeliveryInformation.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryInformation.Entity = null;
						previousValue.RfqItems.Remove(this);
					}
					this._DeliveryInformation.Entity = value;
					if ((value != null))
					{
						value.RfqItems.Add(this);
						this._DeliveryInformationId = value.Id;
					}
					else
					{
						this._DeliveryInformationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeliveryInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rfq_RfqItem", Storage="_Rfq", ThisKey="RfqId", OtherKey="Id", IsForeignKey=true)]
		public Rfq Rfq
		{
			get
			{
				return this._Rfq.Entity;
			}
			set
			{
				Rfq previousValue = this._Rfq.Entity;
				if (((previousValue != value) 
							|| (this._Rfq.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rfq.Entity = null;
						previousValue.RfqItems.Remove(this);
					}
					this._Rfq.Entity = value;
					if ((value != null))
					{
						value.RfqItems.Add(this);
						this._RfqId = value.Id;
					}
					else
					{
						this._RfqId = default(int);
					}
					this.SendPropertyChanged("Rfq");
				}
			}
		}
		
		private void attach_QuoteItems(QuoteItem entity)
		{
			this.SendPropertyChanging();
			entity.RfqItem = this;
		}
		
		private void detach_QuoteItems(QuoteItem entity)
		{
			this.SendPropertyChanging();
			entity.RfqItem = null;
		}
	}
	
	public partial class QuoteItem : RequisitionItem
	{
		
		private int _Id;
		
		private System.Nullable<int> _QuoteId;
		
		private System.Nullable<int> _RfqItemId;
		
		private EntityRef<Quote> _Quote;
		
		private EntityRef<RfqItem> _RfqItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuoteIdChanging(System.Nullable<int> value);
    partial void OnQuoteIdChanged();
    partial void OnRfqItemIdChanging(System.Nullable<int> value);
    partial void OnRfqItemIdChanged();
    #endregion
		
		public QuoteItem()
		{
			this._Quote = default(EntityRef<Quote>);
			this._RfqItem = default(EntityRef<RfqItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteId", DbType="Int")]
		public System.Nullable<int> QuoteId
		{
			get
			{
				return this._QuoteId;
			}
			set
			{
				if ((this._QuoteId != value))
				{
					if (this._Quote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteIdChanging(value);
					this.SendPropertyChanging();
					this._QuoteId = value;
					this.SendPropertyChanged("QuoteId");
					this.OnQuoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RfqItemId", DbType="Int")]
		public System.Nullable<int> RfqItemId
		{
			get
			{
				return this._RfqItemId;
			}
			set
			{
				if ((this._RfqItemId != value))
				{
					if (this._RfqItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRfqItemIdChanging(value);
					this.SendPropertyChanging();
					this._RfqItemId = value;
					this.SendPropertyChanged("RfqItemId");
					this.OnRfqItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quote_QuoteItem", Storage="_Quote", ThisKey="QuoteId", OtherKey="Id", IsForeignKey=true)]
		public Quote Quote
		{
			get
			{
				return this._Quote.Entity;
			}
			set
			{
				Quote previousValue = this._Quote.Entity;
				if (((previousValue != value) 
							|| (this._Quote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quote.Entity = null;
						previousValue.QuoteItems.Remove(this);
					}
					this._Quote.Entity = value;
					if ((value != null))
					{
						value.QuoteItems.Add(this);
						this._QuoteId = value.Id;
					}
					else
					{
						this._QuoteId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Quote");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RfqItem_QuoteItem", Storage="_RfqItem", ThisKey="RfqItemId", OtherKey="Id", IsForeignKey=true)]
		public RfqItem RfqItem
		{
			get
			{
				return this._RfqItem.Entity;
			}
			set
			{
				RfqItem previousValue = this._RfqItem.Entity;
				if (((previousValue != value) 
							|| (this._RfqItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RfqItem.Entity = null;
						previousValue.QuoteItems.Remove(this);
					}
					this._RfqItem.Entity = value;
					if ((value != null))
					{
						value.QuoteItems.Add(this);
						this._RfqItemId = value.Id;
					}
					else
					{
						this._RfqItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("RfqItem");
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChemicalAdditive")]
	public partial class ChemicalAdditive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private bool _AntiBlock;
		
		private bool _AntiStatic;
		
		private bool _FoodFlex;
		
		private bool _Shrink;
		
		private bool _VirginMaterial;
		
		private bool _HighImpact;
		
		private bool _Utility;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnAntiBlockChanging(bool value);
    partial void OnAntiBlockChanged();
    partial void OnAntiStaticChanging(bool value);
    partial void OnAntiStaticChanged();
    partial void OnFoodFlexChanging(bool value);
    partial void OnFoodFlexChanged();
    partial void OnShrinkChanging(bool value);
    partial void OnShrinkChanged();
    partial void OnVirginMaterialChanging(bool value);
    partial void OnVirginMaterialChanged();
    partial void OnHighImpactChanging(bool value);
    partial void OnHighImpactChanged();
    partial void OnUtilityChanging(bool value);
    partial void OnUtilityChanged();
    #endregion
		
		public ChemicalAdditive()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AntiBlock", DbType="Bit NOT NULL")]
		public bool AntiBlock
		{
			get
			{
				return this._AntiBlock;
			}
			set
			{
				if ((this._AntiBlock != value))
				{
					this.OnAntiBlockChanging(value);
					this.SendPropertyChanging();
					this._AntiBlock = value;
					this.SendPropertyChanged("AntiBlock");
					this.OnAntiBlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AntiStatic", DbType="Bit NOT NULL")]
		public bool AntiStatic
		{
			get
			{
				return this._AntiStatic;
			}
			set
			{
				if ((this._AntiStatic != value))
				{
					this.OnAntiStaticChanging(value);
					this.SendPropertyChanging();
					this._AntiStatic = value;
					this.SendPropertyChanged("AntiStatic");
					this.OnAntiStaticChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodFlex", DbType="Bit NOT NULL")]
		public bool FoodFlex
		{
			get
			{
				return this._FoodFlex;
			}
			set
			{
				if ((this._FoodFlex != value))
				{
					this.OnFoodFlexChanging(value);
					this.SendPropertyChanging();
					this._FoodFlex = value;
					this.SendPropertyChanged("FoodFlex");
					this.OnFoodFlexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shrink", DbType="Bit NOT NULL")]
		public bool Shrink
		{
			get
			{
				return this._Shrink;
			}
			set
			{
				if ((this._Shrink != value))
				{
					this.OnShrinkChanging(value);
					this.SendPropertyChanging();
					this._Shrink = value;
					this.SendPropertyChanged("Shrink");
					this.OnShrinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirginMaterial", DbType="Bit NOT NULL")]
		public bool VirginMaterial
		{
			get
			{
				return this._VirginMaterial;
			}
			set
			{
				if ((this._VirginMaterial != value))
				{
					this.OnVirginMaterialChanging(value);
					this.SendPropertyChanging();
					this._VirginMaterial = value;
					this.SendPropertyChanged("VirginMaterial");
					this.OnVirginMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighImpact", DbType="Bit NOT NULL")]
		public bool HighImpact
		{
			get
			{
				return this._HighImpact;
			}
			set
			{
				if ((this._HighImpact != value))
				{
					this.OnHighImpactChanging(value);
					this.SendPropertyChanging();
					this._HighImpact = value;
					this.SendPropertyChanged("HighImpact");
					this.OnHighImpactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Utility", DbType="Bit NOT NULL")]
		public bool Utility
		{
			get
			{
				return this._Utility;
			}
			set
			{
				if ((this._Utility != value))
				{
					this.OnUtilityChanging(value);
					this.SendPropertyChanging();
					this._Utility = value;
					this.SendPropertyChanged("Utility");
					this.OnUtilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ChemicalAdditive", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ChemicalAdditive = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ChemicalAdditive = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ColorInfo")]
	public partial class ColorInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _Color;
		
		private short _Trasparency;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnColorChanging(short value);
    partial void OnColorChanged();
    partial void OnTrasparencyChanging(short value);
    partial void OnTrasparencyChanged();
    #endregion
		
		public ColorInfo()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="SmallInt NOT NULL")]
		public short Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trasparency", DbType="SmallInt NOT NULL")]
		public short Trasparency
		{
			get
			{
				return this._Trasparency;
			}
			set
			{
				if ((this._Trasparency != value))
				{
					this.OnTrasparencyChanging(value);
					this.SendPropertyChanging();
					this._Trasparency = value;
					this.SendPropertyChanged("Trasparency");
					this.OnTrasparencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ColorInfo", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ColorInfo = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ColorInfo = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoldingInfo")]
	public partial class FoldingInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _FoldType;
		
		private short _SlitPosition;
		
		private bool _Trimmed;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnFoldTypeChanging(short value);
    partial void OnFoldTypeChanged();
    partial void OnSlitPositionChanging(short value);
    partial void OnSlitPositionChanged();
    partial void OnTrimmedChanging(bool value);
    partial void OnTrimmedChanged();
    #endregion
		
		public FoldingInfo()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoldType", DbType="SmallInt NOT NULL")]
		public short FoldType
		{
			get
			{
				return this._FoldType;
			}
			set
			{
				if ((this._FoldType != value))
				{
					this.OnFoldTypeChanging(value);
					this.SendPropertyChanging();
					this._FoldType = value;
					this.SendPropertyChanged("FoldType");
					this.OnFoldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlitPosition", DbType="SmallInt NOT NULL")]
		public short SlitPosition
		{
			get
			{
				return this._SlitPosition;
			}
			set
			{
				if ((this._SlitPosition != value))
				{
					this.OnSlitPositionChanging(value);
					this.SendPropertyChanging();
					this._SlitPosition = value;
					this.SendPropertyChanged("SlitPosition");
					this.OnSlitPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trimmed", DbType="Bit NOT NULL")]
		public bool Trimmed
		{
			get
			{
				return this._Trimmed;
			}
			set
			{
				if ((this._Trimmed != value))
				{
					this.OnTrimmedChanging(value);
					this.SendPropertyChanging();
					this._Trimmed = value;
					this.SendPropertyChanged("Trimmed");
					this.OnTrimmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_FoldingInfo", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.FoldingInfo = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.FoldingInfo = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gauge")]
	public partial class Gauge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private decimal _Size;
		
		private bool _FullGauge;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnSizeChanging(decimal value);
    partial void OnSizeChanged();
    partial void OnFullGaugeChanging(bool value);
    partial void OnFullGaugeChanged();
    #endregion
		
		public Gauge()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(10,8) NOT NULL")]
		public decimal Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullGauge", DbType="Bit NOT NULL")]
		public bool FullGauge
		{
			get
			{
				return this._FullGauge;
			}
			set
			{
				if ((this._FullGauge != value))
				{
					this.OnFullGaugeChanging(value);
					this.SendPropertyChanging();
					this._FullGauge = value;
					this.SendPropertyChanged("FullGauge");
					this.OnFullGaugeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Gauge", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Gauge = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Gauge = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gusset")]
	public partial class Gusset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _Orientation;
		
		private decimal _Size;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnOrientationChanging(short value);
    partial void OnOrientationChanged();
    partial void OnSizeChanging(decimal value);
    partial void OnSizeChanged();
    #endregion
		
		public Gusset()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Orientation", DbType="SmallInt NOT NULL")]
		public short Orientation
		{
			get
			{
				return this._Orientation;
			}
			set
			{
				if ((this._Orientation != value))
				{
					this.OnOrientationChanging(value);
					this.SendPropertyChanging();
					this._Orientation = value;
					this.SendPropertyChanged("Orientation");
					this.OnOrientationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Decimal(10,4) NOT NULL")]
		public decimal Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Gusset", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Gusset = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Gusset = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hole")]
	public partial class Hole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _HoleSize;
		
		private short _Quantity;
		
		private string _Comments;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnHoleSizeChanging(short value);
    partial void OnHoleSizeChanged();
    partial void OnQuantityChanging(short value);
    partial void OnQuantityChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Hole()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleSize", DbType="SmallInt NOT NULL")]
		public short HoleSize
		{
			get
			{
				return this._HoleSize;
			}
			set
			{
				if ((this._HoleSize != value))
				{
					this.OnHoleSizeChanging(value);
					this.SendPropertyChanging();
					this._HoleSize = value;
					this.SendPropertyChanged("HoleSize");
					this.OnHoleSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="SmallInt NOT NULL")]
		public short Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Hole", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Hole = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Hole = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LipHood")]
	public partial class LipHood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _Type;
		
		private decimal _LipSize;
		
		private decimal _HoodSize;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnLipSizeChanging(decimal value);
    partial void OnLipSizeChanged();
    partial void OnHoodSizeChanging(decimal value);
    partial void OnHoodSizeChanged();
    #endregion
		
		public LipHood()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LipSize", DbType="Decimal(10,4) NOT NULL")]
		public decimal LipSize
		{
			get
			{
				return this._LipSize;
			}
			set
			{
				if ((this._LipSize != value))
				{
					this.OnLipSizeChanging(value);
					this.SendPropertyChanging();
					this._LipSize = value;
					this.SendPropertyChanged("LipSize");
					this.OnLipSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoodSize", DbType="Decimal(10,4) NOT NULL")]
		public decimal HoodSize
		{
			get
			{
				return this._HoodSize;
			}
			set
			{
				if ((this._HoodSize != value))
				{
					this.OnHoodSizeChanging(value);
					this.SendPropertyChanging();
					this._HoodSize = value;
					this.SendPropertyChanged("HoodSize");
					this.OnHoodSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_LipHood", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.LipHood = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.LipHood = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Microvent")]
	public partial class Microvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _Type;
		
		private string _Comments;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Microvent()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Microvent", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Microvent = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Microvent = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Packaging")]
	public partial class Packaging : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _Type;
		
		private decimal _Value;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public Packaging()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(10,4) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Packaging", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Packaging = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Packaging = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrintingInfo")]
	public partial class PrintingInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private short _Positioning;
		
		private short _OuterSideColoring;
		
		private short _InnerSideColoring;
		
		private string _Description;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnPositioningChanging(short value);
    partial void OnPositioningChanged();
    partial void OnOuterSideColoringChanging(short value);
    partial void OnOuterSideColoringChanged();
    partial void OnInnerSideColoringChanging(short value);
    partial void OnInnerSideColoringChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PrintingInfo()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Positioning", DbType="SmallInt NOT NULL")]
		public short Positioning
		{
			get
			{
				return this._Positioning;
			}
			set
			{
				if ((this._Positioning != value))
				{
					this.OnPositioningChanging(value);
					this.SendPropertyChanging();
					this._Positioning = value;
					this.SendPropertyChanged("Positioning");
					this.OnPositioningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OuterSideColoring", DbType="SmallInt NOT NULL")]
		public short OuterSideColoring
		{
			get
			{
				return this._OuterSideColoring;
			}
			set
			{
				if ((this._OuterSideColoring != value))
				{
					this.OnOuterSideColoringChanging(value);
					this.SendPropertyChanging();
					this._OuterSideColoring = value;
					this.SendPropertyChanged("OuterSideColoring");
					this.OnOuterSideColoringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InnerSideColoring", DbType="SmallInt NOT NULL")]
		public short InnerSideColoring
		{
			get
			{
				return this._InnerSideColoring;
			}
			set
			{
				if ((this._InnerSideColoring != value))
				{
					this.OnInnerSideColoringChanging(value);
					this.SendPropertyChanging();
					this._InnerSideColoring = value;
					this.SendPropertyChanged("InnerSideColoring");
					this.OnInnerSideColoringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_PrintingInfo", Storage="_Product", ThisKey="ProductId", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.PrintingInfo = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.PrintingInfo = this;
						this._ProductId = value.ID;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private short _Type;
		
		private decimal _HeaderSize;
		
		private decimal _Length;
		
		private decimal _Width;
		
		private bool _LeakProof;
		
		private string _Notes;
		
		private short _RollsPerSkid;
		
		private short _SealedFirstType;
		
		private short _SlipType;
		
		private short _SlitPosition;
		
		private byte _UviMonth;
		
		private string _PartNumber;
		
		private EntityRef<ChemicalAdditive> _ChemicalAdditive;
		
		private EntityRef<ColorInfo> _ColorInfo;
		
		private EntityRef<FoldingInfo> _FoldingInfo;
		
		private EntityRef<Gauge> _Gauge;
		
		private EntityRef<Gusset> _Gusset;
		
		private EntityRef<Hole> _Hole;
		
		private EntityRef<LipHood> _LipHood;
		
		private EntityRef<Microvent> _Microvent;
		
		private EntityRef<Packaging> _Packaging;
		
		private EntityRef<PrintingInfo> _PrintingInfo;
		
		private EntityRef<RfqItem> _RfqItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnHeaderSizeChanging(decimal value);
    partial void OnHeaderSizeChanged();
    partial void OnLengthChanging(decimal value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(decimal value);
    partial void OnWidthChanged();
    partial void OnLeakProofChanging(bool value);
    partial void OnLeakProofChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnRollsPerSkidChanging(short value);
    partial void OnRollsPerSkidChanged();
    partial void OnSealedFirstTypeChanging(short value);
    partial void OnSealedFirstTypeChanged();
    partial void OnSlipTypeChanging(short value);
    partial void OnSlipTypeChanged();
    partial void OnSlitPositionChanging(short value);
    partial void OnSlitPositionChanged();
    partial void OnUviMonthChanging(byte value);
    partial void OnUviMonthChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    #endregion
		
		public Product()
		{
			this._ChemicalAdditive = default(EntityRef<ChemicalAdditive>);
			this._ColorInfo = default(EntityRef<ColorInfo>);
			this._FoldingInfo = default(EntityRef<FoldingInfo>);
			this._Gauge = default(EntityRef<Gauge>);
			this._Gusset = default(EntityRef<Gusset>);
			this._Hole = default(EntityRef<Hole>);
			this._LipHood = default(EntityRef<LipHood>);
			this._Microvent = default(EntityRef<Microvent>);
			this._Packaging = default(EntityRef<Packaging>);
			this._PrintingInfo = default(EntityRef<PrintingInfo>);
			this._RfqItem = default(EntityRef<RfqItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._RfqItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderSize", DbType="Decimal(7,4) NOT NULL")]
		public decimal HeaderSize
		{
			get
			{
				return this._HeaderSize;
			}
			set
			{
				if ((this._HeaderSize != value))
				{
					this.OnHeaderSizeChanging(value);
					this.SendPropertyChanging();
					this._HeaderSize = value;
					this.SendPropertyChanged("HeaderSize");
					this.OnHeaderSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(10,4) NOT NULL")]
		public decimal Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Decimal(10,4) NOT NULL")]
		public decimal Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeakProof", DbType="Bit NOT NULL")]
		public bool LeakProof
		{
			get
			{
				return this._LeakProof;
			}
			set
			{
				if ((this._LeakProof != value))
				{
					this.OnLeakProofChanging(value);
					this.SendPropertyChanging();
					this._LeakProof = value;
					this.SendPropertyChanged("LeakProof");
					this.OnLeakProofChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2000)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollsPerSkid", DbType="SmallInt NOT NULL")]
		public short RollsPerSkid
		{
			get
			{
				return this._RollsPerSkid;
			}
			set
			{
				if ((this._RollsPerSkid != value))
				{
					this.OnRollsPerSkidChanging(value);
					this.SendPropertyChanging();
					this._RollsPerSkid = value;
					this.SendPropertyChanged("RollsPerSkid");
					this.OnRollsPerSkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealedFirstType", DbType="SmallInt NOT NULL")]
		public short SealedFirstType
		{
			get
			{
				return this._SealedFirstType;
			}
			set
			{
				if ((this._SealedFirstType != value))
				{
					this.OnSealedFirstTypeChanging(value);
					this.SendPropertyChanging();
					this._SealedFirstType = value;
					this.SendPropertyChanged("SealedFirstType");
					this.OnSealedFirstTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlipType", DbType="SmallInt NOT NULL")]
		public short SlipType
		{
			get
			{
				return this._SlipType;
			}
			set
			{
				if ((this._SlipType != value))
				{
					this.OnSlipTypeChanging(value);
					this.SendPropertyChanging();
					this._SlipType = value;
					this.SendPropertyChanged("SlipType");
					this.OnSlipTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlitPosition", DbType="SmallInt NOT NULL")]
		public short SlitPosition
		{
			get
			{
				return this._SlitPosition;
			}
			set
			{
				if ((this._SlitPosition != value))
				{
					this.OnSlitPositionChanging(value);
					this.SendPropertyChanging();
					this._SlitPosition = value;
					this.SendPropertyChanged("SlitPosition");
					this.OnSlitPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UviMonth", DbType="TinyInt NOT NULL")]
		public byte UviMonth
		{
			get
			{
				return this._UviMonth;
			}
			set
			{
				if ((this._UviMonth != value))
				{
					this.OnUviMonthChanging(value);
					this.SendPropertyChanging();
					this._UviMonth = value;
					this.SendPropertyChanged("UviMonth");
					this.OnUviMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="VarChar(100)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ChemicalAdditive", Storage="_ChemicalAdditive", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public ChemicalAdditive ChemicalAdditive
		{
			get
			{
				return this._ChemicalAdditive.Entity;
			}
			set
			{
				ChemicalAdditive previousValue = this._ChemicalAdditive.Entity;
				if (((previousValue != value) 
							|| (this._ChemicalAdditive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChemicalAdditive.Entity = null;
						previousValue.Product = null;
					}
					this._ChemicalAdditive.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("ChemicalAdditive");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ColorInfo", Storage="_ColorInfo", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public ColorInfo ColorInfo
		{
			get
			{
				return this._ColorInfo.Entity;
			}
			set
			{
				ColorInfo previousValue = this._ColorInfo.Entity;
				if (((previousValue != value) 
							|| (this._ColorInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ColorInfo.Entity = null;
						previousValue.Product = null;
					}
					this._ColorInfo.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("ColorInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_FoldingInfo", Storage="_FoldingInfo", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public FoldingInfo FoldingInfo
		{
			get
			{
				return this._FoldingInfo.Entity;
			}
			set
			{
				FoldingInfo previousValue = this._FoldingInfo.Entity;
				if (((previousValue != value) 
							|| (this._FoldingInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoldingInfo.Entity = null;
						previousValue.Product = null;
					}
					this._FoldingInfo.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("FoldingInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Gauge", Storage="_Gauge", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public Gauge Gauge
		{
			get
			{
				return this._Gauge.Entity;
			}
			set
			{
				Gauge previousValue = this._Gauge.Entity;
				if (((previousValue != value) 
							|| (this._Gauge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gauge.Entity = null;
						previousValue.Product = null;
					}
					this._Gauge.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("Gauge");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Gusset", Storage="_Gusset", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public Gusset Gusset
		{
			get
			{
				return this._Gusset.Entity;
			}
			set
			{
				Gusset previousValue = this._Gusset.Entity;
				if (((previousValue != value) 
							|| (this._Gusset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gusset.Entity = null;
						previousValue.Product = null;
					}
					this._Gusset.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("Gusset");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Hole", Storage="_Hole", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public Hole Hole
		{
			get
			{
				return this._Hole.Entity;
			}
			set
			{
				Hole previousValue = this._Hole.Entity;
				if (((previousValue != value) 
							|| (this._Hole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hole.Entity = null;
						previousValue.Product = null;
					}
					this._Hole.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("Hole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_LipHood", Storage="_LipHood", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public LipHood LipHood
		{
			get
			{
				return this._LipHood.Entity;
			}
			set
			{
				LipHood previousValue = this._LipHood.Entity;
				if (((previousValue != value) 
							|| (this._LipHood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LipHood.Entity = null;
						previousValue.Product = null;
					}
					this._LipHood.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("LipHood");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Microvent", Storage="_Microvent", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public Microvent Microvent
		{
			get
			{
				return this._Microvent.Entity;
			}
			set
			{
				Microvent previousValue = this._Microvent.Entity;
				if (((previousValue != value) 
							|| (this._Microvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Microvent.Entity = null;
						previousValue.Product = null;
					}
					this._Microvent.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("Microvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Packaging", Storage="_Packaging", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public Packaging Packaging
		{
			get
			{
				return this._Packaging.Entity;
			}
			set
			{
				Packaging previousValue = this._Packaging.Entity;
				if (((previousValue != value) 
							|| (this._Packaging.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Packaging.Entity = null;
						previousValue.Product = null;
					}
					this._Packaging.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("Packaging");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_PrintingInfo", Storage="_PrintingInfo", ThisKey="ID", OtherKey="ProductId", IsUnique=true, IsForeignKey=false)]
		public PrintingInfo PrintingInfo
		{
			get
			{
				return this._PrintingInfo.Entity;
			}
			set
			{
				PrintingInfo previousValue = this._PrintingInfo.Entity;
				if (((previousValue != value) 
							|| (this._PrintingInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrintingInfo.Entity = null;
						previousValue.Product = null;
					}
					this._PrintingInfo.Entity = value;
					if ((value != null))
					{
						value.Product = this;
					}
					this.SendPropertyChanged("PrintingInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RfqItem_Product", Storage="_RfqItem", ThisKey="ID", OtherKey="ProductId", IsForeignKey=true)]
		public RfqItem RfqItem
		{
			get
			{
				return this._RfqItem.Entity;
			}
			set
			{
				RfqItem previousValue = this._RfqItem.Entity;
				if (((previousValue != value) 
							|| (this._RfqItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RfqItem.Entity = null;
						previousValue.Product = null;
					}
					this._RfqItem.Entity = value;
					if ((value != null))
					{
						value.Product = this;
						this._ID = value.ProductId;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("RfqItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
