//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ROS.Schema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SchemaProduct")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SchemaProduct : global::System.Data.DataSet {
        
        private ProductsDataTable tableProducts;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SchemaProduct() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SchemaProduct(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Products"] != null)) {
                    base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductsDataTable Products {
            get {
                return this.tableProducts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            SchemaProduct cln = ((SchemaProduct)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Products"] != null)) {
                    base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableProducts = ((ProductsDataTable)(base.Tables["Products"]));
            if ((initTable == true)) {
                if ((this.tableProducts != null)) {
                    this.tableProducts.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "SchemaProduct";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SchemaProduct.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProducts = new ProductsDataTable();
            base.Tables.Add(this.tableProducts);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeProducts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SchemaProduct ds = new SchemaProduct();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ProductsRowChangeEventHandler(object sender, ProductsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductsDataTable : global::System.Data.TypedTableBase<ProductsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnProductTypeID;
            
            private global::System.Data.DataColumn columnDateTimeStamp;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnGusset;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnGauge;
            
            private global::System.Data.DataColumn columnHeaderSize;
            
            private global::System.Data.DataColumn columnMicrovents;
            
            private global::System.Data.DataColumn columnHoles;
            
            private global::System.Data.DataColumn columnLeakProof;
            
            private global::System.Data.DataColumn columnLip;
            
            private global::System.Data.DataColumn columnBundle;
            
            private global::System.Data.DataColumn columnFolding;
            
            private global::System.Data.DataColumn columnSealedFirst;
            
            private global::System.Data.DataColumn columnSealingID;
            
            private global::System.Data.DataColumn columnColor;
            
            private global::System.Data.DataColumn columnChemicalAdditives;
            
            private global::System.Data.DataColumn columnSlipID;
            
            private global::System.Data.DataColumn columnUVIMonths;
            
            private global::System.Data.DataColumn columnClarityID;
            
            private global::System.Data.DataColumn columnSpecialityResinsID;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnPartNumber;
            
            private global::System.Data.DataColumn columnPredefined;
            
            private global::System.Data.DataColumn columnCopiedFrom;
            
            private global::System.Data.DataColumn columnOwnerAccountNumber;
            
            private global::System.Data.DataColumn columnCoreTypeId;
            
            private global::System.Data.DataColumn columnSleeveColorId;
            
            private global::System.Data.DataColumn columnCartonSizeId;
            
            private global::System.Data.DataColumn columnRollsPerSkid;
            
            private global::System.Data.DataColumn columnUserRequest;
            
            private global::System.Data.DataColumn columnPrintingId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductsDataTable() {
                this.TableName = "Products";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProductsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ProductsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ProductTypeIDColumn {
                get {
                    return this.columnProductTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DateTimeStampColumn {
                get {
                    return this.columnDateTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GussetColumn {
                get {
                    return this.columnGusset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GaugeColumn {
                get {
                    return this.columnGauge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HeaderSizeColumn {
                get {
                    return this.columnHeaderSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MicroventsColumn {
                get {
                    return this.columnMicrovents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HolesColumn {
                get {
                    return this.columnHoles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LeakProofColumn {
                get {
                    return this.columnLeakProof;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LipColumn {
                get {
                    return this.columnLip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BundleColumn {
                get {
                    return this.columnBundle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FoldingColumn {
                get {
                    return this.columnFolding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SealedFirstColumn {
                get {
                    return this.columnSealedFirst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SealingIDColumn {
                get {
                    return this.columnSealingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ChemicalAdditivesColumn {
                get {
                    return this.columnChemicalAdditives;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SlipIDColumn {
                get {
                    return this.columnSlipID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UVIMonthsColumn {
                get {
                    return this.columnUVIMonths;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ClarityIDColumn {
                get {
                    return this.columnClarityID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SpecialityResinsIDColumn {
                get {
                    return this.columnSpecialityResinsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PartNumberColumn {
                get {
                    return this.columnPartNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PredefinedColumn {
                get {
                    return this.columnPredefined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CopiedFromColumn {
                get {
                    return this.columnCopiedFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OwnerAccountNumberColumn {
                get {
                    return this.columnOwnerAccountNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoreTypeIdColumn {
                get {
                    return this.columnCoreTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SleeveColorIdColumn {
                get {
                    return this.columnSleeveColorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CartonSizeIdColumn {
                get {
                    return this.columnCartonSizeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RollsPerSkidColumn {
                get {
                    return this.columnRollsPerSkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UserRequestColumn {
                get {
                    return this.columnUserRequest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PrintingIdColumn {
                get {
                    return this.columnPrintingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductsRow this[int index] {
                get {
                    return ((ProductsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductsRowChangeEventHandler ProductsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductsRowChangeEventHandler ProductsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductsRowChangeEventHandler ProductsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductsRowChangeEventHandler ProductsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddProductsRow(ProductsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductsRow AddProductsRow(
                        int ProductTypeID, 
                        System.DateTime DateTimeStamp, 
                        decimal Width, 
                        string Gusset, 
                        decimal Length, 
                        decimal Gauge, 
                        decimal HeaderSize, 
                        string Microvents, 
                        string Holes, 
                        bool LeakProof, 
                        string Lip, 
                        string Bundle, 
                        string Folding, 
                        short SealedFirst, 
                        short SealingID, 
                        string Color, 
                        int ChemicalAdditives, 
                        short SlipID, 
                        byte UVIMonths, 
                        short ClarityID, 
                        short SpecialityResinsID, 
                        string Comments, 
                        string PartNumber, 
                        bool Predefined, 
                        int CopiedFrom, 
                        int OwnerAccountNumber, 
                        short CoreTypeId, 
                        short SleeveColorId, 
                        short CartonSizeId, 
                        short RollsPerSkid, 
                        string UserRequest, 
                        int? PrintingId) {
                ProductsRow rowProductsRow = ((ProductsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProductTypeID,
                        DateTimeStamp,
                        Width,
                        Gusset,
                        Length,
                        Gauge,
                        HeaderSize,
                        Microvents,
                        Holes,
                        LeakProof,
                        Lip,
                        Bundle,
                        Folding,
                        SealedFirst,
                        SealingID,
                        Color,
                        ChemicalAdditives,
                        SlipID,
                        UVIMonths,
                        ClarityID,
                        SpecialityResinsID,
                        Comments,
                        PartNumber,
                        Predefined,
                        CopiedFrom,
                        OwnerAccountNumber,
                        CoreTypeId,
                        SleeveColorId,
                        CartonSizeId,
                        RollsPerSkid,
                        UserRequest,
                        PrintingId};
                rowProductsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProductsRow);
                return rowProductsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductsRow FindByID(int ID) {
                return ((ProductsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ProductsDataTable cln = ((ProductsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProductsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnProductTypeID = base.Columns["ProductTypeID"];
                this.columnDateTimeStamp = base.Columns["DateTimeStamp"];
                this.columnWidth = base.Columns["Width"];
                this.columnGusset = base.Columns["Gusset"];
                this.columnLength = base.Columns["Length"];
                this.columnGauge = base.Columns["Gauge"];
                this.columnHeaderSize = base.Columns["HeaderSize"];
                this.columnMicrovents = base.Columns["Microvents"];
                this.columnHoles = base.Columns["Holes"];
                this.columnLeakProof = base.Columns["LeakProof"];
                this.columnLip = base.Columns["Lip"];
                this.columnBundle = base.Columns["Bundle"];
                this.columnFolding = base.Columns["Folding"];
                this.columnSealedFirst = base.Columns["SealedFirst"];
                this.columnSealingID = base.Columns["SealingID"];
                this.columnColor = base.Columns["Color"];
                this.columnChemicalAdditives = base.Columns["ChemicalAdditives"];
                this.columnSlipID = base.Columns["SlipID"];
                this.columnUVIMonths = base.Columns["UVIMonths"];
                this.columnClarityID = base.Columns["ClarityID"];
                this.columnSpecialityResinsID = base.Columns["SpecialityResinsID"];
                this.columnComments = base.Columns["Comments"];
                this.columnPartNumber = base.Columns["PartNumber"];
                this.columnPredefined = base.Columns["Predefined"];
                this.columnCopiedFrom = base.Columns["CopiedFrom"];
                this.columnOwnerAccountNumber = base.Columns["OwnerAccountNumber"];
                this.columnCoreTypeId = base.Columns["CoreTypeId"];
                this.columnSleeveColorId = base.Columns["SleeveColorId"];
                this.columnCartonSizeId = base.Columns["CartonSizeId"];
                this.columnRollsPerSkid = base.Columns["RollsPerSkid"];
                this.columnUserRequest = base.Columns["UserRequest"];
                this.columnPrintingId = base.Columns["PrintingId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProductTypeID = new global::System.Data.DataColumn("ProductTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductTypeID);
                this.columnDateTimeStamp = new global::System.Data.DataColumn("DateTimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeStamp);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnGusset = new global::System.Data.DataColumn("Gusset", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGusset);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnGauge = new global::System.Data.DataColumn("Gauge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGauge);
                this.columnHeaderSize = new global::System.Data.DataColumn("HeaderSize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeaderSize);
                this.columnMicrovents = new global::System.Data.DataColumn("Microvents", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMicrovents);
                this.columnHoles = new global::System.Data.DataColumn("Holes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoles);
                this.columnLeakProof = new global::System.Data.DataColumn("LeakProof", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeakProof);
                this.columnLip = new global::System.Data.DataColumn("Lip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLip);
                this.columnBundle = new global::System.Data.DataColumn("Bundle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBundle);
                this.columnFolding = new global::System.Data.DataColumn("Folding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFolding);
                this.columnSealedFirst = new global::System.Data.DataColumn("SealedFirst", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSealedFirst);
                this.columnSealingID = new global::System.Data.DataColumn("SealingID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSealingID);
                this.columnColor = new global::System.Data.DataColumn("Color", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor);
                this.columnChemicalAdditives = new global::System.Data.DataColumn("ChemicalAdditives", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChemicalAdditives);
                this.columnSlipID = new global::System.Data.DataColumn("SlipID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlipID);
                this.columnUVIMonths = new global::System.Data.DataColumn("UVIMonths", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUVIMonths);
                this.columnClarityID = new global::System.Data.DataColumn("ClarityID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClarityID);
                this.columnSpecialityResinsID = new global::System.Data.DataColumn("SpecialityResinsID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialityResinsID);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnPartNumber = new global::System.Data.DataColumn("PartNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartNumber);
                this.columnPredefined = new global::System.Data.DataColumn("Predefined", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPredefined);
                this.columnCopiedFrom = new global::System.Data.DataColumn("CopiedFrom", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCopiedFrom);
                this.columnOwnerAccountNumber = new global::System.Data.DataColumn("OwnerAccountNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerAccountNumber);
                this.columnCoreTypeId = new global::System.Data.DataColumn("CoreTypeId", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoreTypeId);
                this.columnSleeveColorId = new global::System.Data.DataColumn("SleeveColorId", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSleeveColorId);
                this.columnCartonSizeId = new global::System.Data.DataColumn("CartonSizeId", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartonSizeId);
                this.columnRollsPerSkid = new global::System.Data.DataColumn("RollsPerSkid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollsPerSkid);
                this.columnUserRequest = new global::System.Data.DataColumn("UserRequest", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserRequest);
                this.columnPrintingId = new global::System.Data.DataColumn("PrintingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrintingId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnProductTypeID.AllowDBNull = false;
                this.columnWidth.AllowDBNull = false;
                this.columnGusset.AllowDBNull = false;
                this.columnGusset.MaxLength = 10;
                this.columnLength.AllowDBNull = false;
                this.columnGauge.AllowDBNull = false;
                this.columnHeaderSize.AllowDBNull = false;
                this.columnMicrovents.AllowDBNull = false;
                this.columnMicrovents.MaxLength = 110;
                this.columnHoles.AllowDBNull = false;
                this.columnHoles.MaxLength = 110;
                this.columnLeakProof.AllowDBNull = false;
                this.columnLip.AllowDBNull = false;
                this.columnLip.MaxLength = 10;
                this.columnBundle.AllowDBNull = false;
                this.columnBundle.MaxLength = 15;
                this.columnFolding.AllowDBNull = false;
                this.columnFolding.MaxLength = 10;
                this.columnSealedFirst.AllowDBNull = false;
                this.columnSealingID.AllowDBNull = false;
                this.columnColor.AllowDBNull = false;
                this.columnColor.MaxLength = 4;
                this.columnChemicalAdditives.AllowDBNull = false;
                this.columnSlipID.AllowDBNull = false;
                this.columnUVIMonths.AllowDBNull = false;
                this.columnClarityID.AllowDBNull = false;
                this.columnSpecialityResinsID.AllowDBNull = false;
                this.columnComments.AllowDBNull = false;
                this.columnComments.MaxLength = 2000;
                this.columnPartNumber.MaxLength = 120;
                this.columnPredefined.AllowDBNull = false;
                this.columnCopiedFrom.AllowDBNull = false;
                this.columnCoreTypeId.AllowDBNull = false;
                this.columnSleeveColorId.AllowDBNull = false;
                this.columnCartonSizeId.AllowDBNull = false;
                this.columnRollsPerSkid.AllowDBNull = false;
                this.columnUserRequest.MaxLength = 40;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductsRow NewProductsRow() {
                return ((ProductsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProductsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ProductsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductsRowChanged != null)) {
                    this.ProductsRowChanged(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductsRowChanging != null)) {
                    this.ProductsRowChanging(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductsRowDeleted != null)) {
                    this.ProductsRowDeleted(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductsRowDeleting != null)) {
                    this.ProductsRowDeleting(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveProductsRow(ProductsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaProduct ds = new SchemaProduct();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ProductsRow : global::System.Data.DataRow {
            
            private ProductsDataTable tableProducts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProductsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProducts = ((ProductsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID {
                get {
                    return ((int)(this[this.tableProducts.IDColumn]));
                }
                set {
                    this[this.tableProducts.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ProductTypeID {
                get {
                    return ((int)(this[this.tableProducts.ProductTypeIDColumn]));
                }
                set {
                    this[this.tableProducts.ProductTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DateTimeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProducts.DateTimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeStamp\' in table \'Products\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProducts.DateTimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Width {
                get {
                    return ((decimal)(this[this.tableProducts.WidthColumn]));
                }
                set {
                    this[this.tableProducts.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Gusset {
                get {
                    return ((string)(this[this.tableProducts.GussetColumn]));
                }
                set {
                    this[this.tableProducts.GussetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Length {
                get {
                    return ((decimal)(this[this.tableProducts.LengthColumn]));
                }
                set {
                    this[this.tableProducts.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Gauge {
                get {
                    return ((decimal)(this[this.tableProducts.GaugeColumn]));
                }
                set {
                    this[this.tableProducts.GaugeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal HeaderSize {
                get {
                    return ((decimal)(this[this.tableProducts.HeaderSizeColumn]));
                }
                set {
                    this[this.tableProducts.HeaderSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Microvents {
                get {
                    return ((string)(this[this.tableProducts.MicroventsColumn]));
                }
                set {
                    this[this.tableProducts.MicroventsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Holes {
                get {
                    return ((string)(this[this.tableProducts.HolesColumn]));
                }
                set {
                    this[this.tableProducts.HolesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool LeakProof {
                get {
                    return ((bool)(this[this.tableProducts.LeakProofColumn]));
                }
                set {
                    this[this.tableProducts.LeakProofColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Lip {
                get {
                    return ((string)(this[this.tableProducts.LipColumn]));
                }
                set {
                    this[this.tableProducts.LipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Bundle {
                get {
                    return ((string)(this[this.tableProducts.BundleColumn]));
                }
                set {
                    this[this.tableProducts.BundleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Folding {
                get {
                    return ((string)(this[this.tableProducts.FoldingColumn]));
                }
                set {
                    this[this.tableProducts.FoldingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short SealedFirst {
                get {
                    return ((short)(this[this.tableProducts.SealedFirstColumn]));
                }
                set {
                    this[this.tableProducts.SealedFirstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short SealingID {
                get {
                    return ((short)(this[this.tableProducts.SealingIDColumn]));
                }
                set {
                    this[this.tableProducts.SealingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Color {
                get {
                    return ((string)(this[this.tableProducts.ColorColumn]));
                }
                set {
                    this[this.tableProducts.ColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ChemicalAdditives {
                get {
                    return ((int)(this[this.tableProducts.ChemicalAdditivesColumn]));
                }
                set {
                    this[this.tableProducts.ChemicalAdditivesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short SlipID {
                get {
                    return ((short)(this[this.tableProducts.SlipIDColumn]));
                }
                set {
                    this[this.tableProducts.SlipIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte UVIMonths {
                get {
                    return ((byte)(this[this.tableProducts.UVIMonthsColumn]));
                }
                set {
                    this[this.tableProducts.UVIMonthsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short ClarityID {
                get {
                    return ((short)(this[this.tableProducts.ClarityIDColumn]));
                }
                set {
                    this[this.tableProducts.ClarityIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short SpecialityResinsID {
                get {
                    return ((short)(this[this.tableProducts.SpecialityResinsIDColumn]));
                }
                set {
                    this[this.tableProducts.SpecialityResinsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Comments {
                get {
                    return ((string)(this[this.tableProducts.CommentsColumn]));
                }
                set {
                    this[this.tableProducts.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PartNumber {
                get {
                    try {
                        return ((string)(this[this.tableProducts.PartNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PartNumber\' in table \'Products\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProducts.PartNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Predefined {
                get {
                    return ((bool)(this[this.tableProducts.PredefinedColumn]));
                }
                set {
                    this[this.tableProducts.PredefinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CopiedFrom {
                get {
                    return ((int)(this[this.tableProducts.CopiedFromColumn]));
                }
                set {
                    this[this.tableProducts.CopiedFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OwnerAccountNumber {
                get {
                    try {
                        return ((int)(this[this.tableProducts.OwnerAccountNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerAccountNumber\' in table \'Products\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProducts.OwnerAccountNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short CoreTypeId {
                get {
                    return ((short)(this[this.tableProducts.CoreTypeIdColumn]));
                }
                set {
                    this[this.tableProducts.CoreTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short SleeveColorId {
                get {
                    return ((short)(this[this.tableProducts.SleeveColorIdColumn]));
                }
                set {
                    this[this.tableProducts.SleeveColorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short CartonSizeId {
                get {
                    return ((short)(this[this.tableProducts.CartonSizeIdColumn]));
                }
                set {
                    this[this.tableProducts.CartonSizeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short RollsPerSkid {
                get {
                    return ((short)(this[this.tableProducts.RollsPerSkidColumn]));
                }
                set {
                    this[this.tableProducts.RollsPerSkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string UserRequest {
                get {
                    try {
                        return ((string)(this[this.tableProducts.UserRequestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserRequest\' in table \'Products\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProducts.UserRequestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PrintingId {
                get {
                    try {
                        return ((int)(this[this.tableProducts.PrintingIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrintingId\' in table \'Products\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProducts.PrintingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateTimeStampNull() {
                return this.IsNull(this.tableProducts.DateTimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateTimeStampNull() {
                this[this.tableProducts.DateTimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPartNumberNull() {
                return this.IsNull(this.tableProducts.PartNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPartNumberNull() {
                this[this.tableProducts.PartNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOwnerAccountNumberNull() {
                return this.IsNull(this.tableProducts.OwnerAccountNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOwnerAccountNumberNull() {
                this[this.tableProducts.OwnerAccountNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUserRequestNull() {
                return this.IsNull(this.tableProducts.UserRequestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUserRequestNull() {
                this[this.tableProducts.UserRequestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPrintingIdNull() {
                return this.IsNull(this.tableProducts.PrintingIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPrintingIdNull() {
                this[this.tableProducts.PrintingIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ProductsRowChangeEvent : global::System.EventArgs {
            
            private ProductsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductsRowChangeEvent(ProductsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ROS.Schema.SchemaProductTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProductsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ProductsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Products";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ProductTypeID", "ProductTypeID");
            tableMapping.ColumnMappings.Add("DateTimeStamp", "DateTimeStamp");
            tableMapping.ColumnMappings.Add("Width", "Width");
            tableMapping.ColumnMappings.Add("Gusset", "Gusset");
            tableMapping.ColumnMappings.Add("Length", "Length");
            tableMapping.ColumnMappings.Add("Gauge", "Gauge");
            tableMapping.ColumnMappings.Add("HeaderSize", "HeaderSize");
            tableMapping.ColumnMappings.Add("Microvents", "Microvents");
            tableMapping.ColumnMappings.Add("Holes", "Holes");
            tableMapping.ColumnMappings.Add("LeakProof", "LeakProof");
            tableMapping.ColumnMappings.Add("Lip", "Lip");
            tableMapping.ColumnMappings.Add("Bundle", "Bundle");
            tableMapping.ColumnMappings.Add("Folding", "Folding");
            tableMapping.ColumnMappings.Add("SealedFirst", "SealedFirst");
            tableMapping.ColumnMappings.Add("SealingID", "SealingID");
            tableMapping.ColumnMappings.Add("Color", "Color");
            tableMapping.ColumnMappings.Add("ChemicalAdditives", "ChemicalAdditives");
            tableMapping.ColumnMappings.Add("SlipID", "SlipID");
            tableMapping.ColumnMappings.Add("UVIMonths", "UVIMonths");
            tableMapping.ColumnMappings.Add("ClarityID", "ClarityID");
            tableMapping.ColumnMappings.Add("SpecialityResinsID", "SpecialityResinsID");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("PartNumber", "PartNumber");
            tableMapping.ColumnMappings.Add("Predefined", "Predefined");
            tableMapping.ColumnMappings.Add("CopiedFrom", "CopiedFrom");
            tableMapping.ColumnMappings.Add("OwnerAccountNumber", "OwnerAccountNumber");
            tableMapping.ColumnMappings.Add("CoreTypeId", "CoreTypeId");
            tableMapping.ColumnMappings.Add("SleeveColorId", "SleeveColorId");
            tableMapping.ColumnMappings.Add("CartonSizeId", "CartonSizeId");
            tableMapping.ColumnMappings.Add("RollsPerSkid", "RollsPerSkid");
            tableMapping.ColumnMappings.Add("UserRequest", "UserRequest");
            tableMapping.ColumnMappings.Add("PrintingId", "PrintingId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Products] WHERE (([ID] = @Original_ID) AND ([ProductTypeID] = " +
                "@Original_ProductTypeID) AND ((@IsNull_DateTimeStamp = 1 AND [DateTimeStamp] IS " +
                "NULL) OR ([DateTimeStamp] = @Original_DateTimeStamp)) AND ([Width] = @Original_W" +
                "idth) AND ([Gusset] = @Original_Gusset) AND ([Length] = @Original_Length) AND ([" +
                "Gauge] = @Original_Gauge) AND ([HeaderSize] = @Original_HeaderSize) AND ([Microv" +
                "ents] = @Original_Microvents) AND ([Holes] = @Original_Holes) AND ([LeakProof] =" +
                " @Original_LeakProof) AND ([Lip] = @Original_Lip) AND ([Bundle] = @Original_Bund" +
                "le) AND ([Folding] = @Original_Folding) AND ([SealedFirst] = @Original_SealedFir" +
                "st) AND ([SealingID] = @Original_SealingID) AND ([Color] = @Original_Color) AND " +
                "([ChemicalAdditives] = @Original_ChemicalAdditives) AND ([SlipID] = @Original_Sl" +
                "ipID) AND ([UVIMonths] = @Original_UVIMonths) AND ([ClarityID] = @Original_Clari" +
                "tyID) AND ([SpecialityResinsID] = @Original_SpecialityResinsID) AND ([Comments] " +
                "= @Original_Comments) AND ((@IsNull_PartNumber = 1 AND [PartNumber] IS NULL) OR " +
                "([PartNumber] = @Original_PartNumber)) AND ([Predefined] = @Original_Predefined)" +
                " AND ([CopiedFrom] = @Original_CopiedFrom) AND ((@IsNull_OwnerAccountNumber = 1 " +
                "AND [OwnerAccountNumber] IS NULL) OR ([OwnerAccountNumber] = @Original_OwnerAcco" +
                "untNumber)) AND ([CoreTypeId] = @Original_CoreTypeId) AND ([SleeveColorId] = @Or" +
                "iginal_SleeveColorId) AND ([CartonSizeId] = @Original_CartonSizeId) AND ([RollsP" +
                "erSkid] = @Original_RollsPerSkid) AND ((@IsNull_UserRequest = 1 AND [UserRequest" +
                "] IS NULL) OR ([UserRequest] = @Original_UserRequest)) AND ((@IsNull_PrintingId " +
                "= 1 AND [PrintingId] IS NULL) OR ([PrintingId] = @Original_PrintingId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProductTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProductTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateTimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateTimeStamp", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Width", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gusset", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gusset", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Length", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Length", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gauge", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 6, "Gauge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeaderSize", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 4, "HeaderSize", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Microvents", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Microvents", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Holes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Holes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LeakProof", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeakProof", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Lip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Bundle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bundle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Folding", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Folding", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SealedFirst", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealedFirst", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SealingID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealingID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Color", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Color", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChemicalAdditives", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChemicalAdditives", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SlipID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlipID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UVIMonths", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UVIMonths", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClarityID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClarityID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SpecialityResinsID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecialityResinsID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Comments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PartNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PartNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PartNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PartNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Predefined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Predefined", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CopiedFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CopiedFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OwnerAccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerAccountNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OwnerAccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerAccountNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoreTypeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoreTypeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SleeveColorId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SleeveColorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CartonSizeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CartonSizeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RollsPerSkid", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RollsPerSkid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserRequest", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserRequest", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserRequest", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserRequest", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PrintingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrintingId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrintingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrintingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Products] ([ProductTypeID], [DateTimeStamp], [Width], [Gusset], [Length], [Gauge], [HeaderSize], [Microvents], [Holes], [LeakProof], [Lip], [Bundle], [Folding], [SealedFirst], [SealingID], [Color], [ChemicalAdditives], [SlipID], [UVIMonths], [ClarityID], [SpecialityResinsID], [Comments], [PartNumber], [Predefined], [CopiedFrom], [OwnerAccountNumber], [CoreTypeId], [SleeveColorId], [CartonSizeId], [RollsPerSkid], [UserRequest], [PrintingId]) VALUES (@ProductTypeID, @DateTimeStamp, @Width, @Gusset, @Length, @Gauge, @HeaderSize, @Microvents, @Holes, @LeakProof, @Lip, @Bundle, @Folding, @SealedFirst, @SealingID, @Color, @ChemicalAdditives, @SlipID, @UVIMonths, @ClarityID, @SpecialityResinsID, @Comments, @PartNumber, @Predefined, @CopiedFrom, @OwnerAccountNumber, @CoreTypeId, @SleeveColorId, @CartonSizeId, @RollsPerSkid, @UserRequest, @PrintingId);
SELECT ID, ProductTypeID, DateTimeStamp, Width, Gusset, Length, Gauge, HeaderSize, Microvents, Holes, LeakProof, Lip, Bundle, Folding, SealedFirst, SealingID, Color, ChemicalAdditives, SlipID, UVIMonths, ClarityID, SpecialityResinsID, Comments, PartNumber, Predefined, CopiedFrom, OwnerAccountNumber, CoreTypeId, SleeveColorId, CartonSizeId, RollsPerSkid, UserRequest, PrintingId FROM Products WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProductTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProductTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeStamp", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeStamp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Width", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gusset", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gusset", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Length", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gauge", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 6, "Gauge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeaderSize", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 4, "HeaderSize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Microvents", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Microvents", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Holes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Holes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeakProof", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeakProof", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bundle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bundle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Folding", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Folding", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SealedFirst", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealedFirst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SealingID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealingID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Color", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Color", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChemicalAdditives", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChemicalAdditives", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SlipID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlipID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UVIMonths", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UVIMonths", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClarityID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClarityID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecialityResinsID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecialityResinsID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PartNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PartNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Predefined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Predefined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CopiedFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CopiedFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OwnerAccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerAccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoreTypeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoreTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SleeveColorId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SleeveColorId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CartonSizeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CartonSizeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RollsPerSkid", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RollsPerSkid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserRequest", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserRequest", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrintingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrintingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Products] SET [ProductTypeID] = @ProductTypeID, [DateTimeStamp] = @" +
                "DateTimeStamp, [Width] = @Width, [Gusset] = @Gusset, [Length] = @Length, [Gauge]" +
                " = @Gauge, [HeaderSize] = @HeaderSize, [Microvents] = @Microvents, [Holes] = @Ho" +
                "les, [LeakProof] = @LeakProof, [Lip] = @Lip, [Bundle] = @Bundle, [Folding] = @Fo" +
                "lding, [SealedFirst] = @SealedFirst, [SealingID] = @SealingID, [Color] = @Color," +
                " [ChemicalAdditives] = @ChemicalAdditives, [SlipID] = @SlipID, [UVIMonths] = @UV" +
                "IMonths, [ClarityID] = @ClarityID, [SpecialityResinsID] = @SpecialityResinsID, [" +
                "Comments] = @Comments, [PartNumber] = @PartNumber, [Predefined] = @Predefined, [" +
                "CopiedFrom] = @CopiedFrom, [OwnerAccountNumber] = @OwnerAccountNumber, [CoreType" +
                "Id] = @CoreTypeId, [SleeveColorId] = @SleeveColorId, [CartonSizeId] = @CartonSiz" +
                "eId, [RollsPerSkid] = @RollsPerSkid, [UserRequest] = @UserRequest, [PrintingId] " +
                "= @PrintingId WHERE (([ID] = @Original_ID) AND ([ProductTypeID] = @Original_Prod" +
                "uctTypeID) AND ((@IsNull_DateTimeStamp = 1 AND [DateTimeStamp] IS NULL) OR ([Dat" +
                "eTimeStamp] = @Original_DateTimeStamp)) AND ([Width] = @Original_Width) AND ([Gu" +
                "sset] = @Original_Gusset) AND ([Length] = @Original_Length) AND ([Gauge] = @Orig" +
                "inal_Gauge) AND ([HeaderSize] = @Original_HeaderSize) AND ([Microvents] = @Origi" +
                "nal_Microvents) AND ([Holes] = @Original_Holes) AND ([LeakProof] = @Original_Lea" +
                "kProof) AND ([Lip] = @Original_Lip) AND ([Bundle] = @Original_Bundle) AND ([Fold" +
                "ing] = @Original_Folding) AND ([SealedFirst] = @Original_SealedFirst) AND ([Seal" +
                "ingID] = @Original_SealingID) AND ([Color] = @Original_Color) AND ([ChemicalAddi" +
                "tives] = @Original_ChemicalAdditives) AND ([SlipID] = @Original_SlipID) AND ([UV" +
                "IMonths] = @Original_UVIMonths) AND ([ClarityID] = @Original_ClarityID) AND ([Sp" +
                "ecialityResinsID] = @Original_SpecialityResinsID) AND ([Comments] = @Original_Co" +
                "mments) AND ((@IsNull_PartNumber = 1 AND [PartNumber] IS NULL) OR ([PartNumber] " +
                "= @Original_PartNumber)) AND ([Predefined] = @Original_Predefined) AND ([CopiedF" +
                "rom] = @Original_CopiedFrom) AND ((@IsNull_OwnerAccountNumber = 1 AND [OwnerAcco" +
                "untNumber] IS NULL) OR ([OwnerAccountNumber] = @Original_OwnerAccountNumber)) AN" +
                "D ([CoreTypeId] = @Original_CoreTypeId) AND ([SleeveColorId] = @Original_SleeveC" +
                "olorId) AND ([CartonSizeId] = @Original_CartonSizeId) AND ([RollsPerSkid] = @Ori" +
                "ginal_RollsPerSkid) AND ((@IsNull_UserRequest = 1 AND [UserRequest] IS NULL) OR " +
                "([UserRequest] = @Original_UserRequest)) AND ((@IsNull_PrintingId = 1 AND [Print" +
                "ingId] IS NULL) OR ([PrintingId] = @Original_PrintingId)));\r\nSELECT ID, ProductT" +
                "ypeID, DateTimeStamp, Width, Gusset, Length, Gauge, HeaderSize, Microvents, Hole" +
                "s, LeakProof, Lip, Bundle, Folding, SealedFirst, SealingID, Color, ChemicalAddit" +
                "ives, SlipID, UVIMonths, ClarityID, SpecialityResinsID, Comments, PartNumber, Pr" +
                "edefined, CopiedFrom, OwnerAccountNumber, CoreTypeId, SleeveColorId, CartonSizeI" +
                "d, RollsPerSkid, UserRequest, PrintingId FROM Products WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProductTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProductTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeStamp", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeStamp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Width", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gusset", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gusset", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Length", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Gauge", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 6, "Gauge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeaderSize", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 4, "HeaderSize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Microvents", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Microvents", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Holes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Holes", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeakProof", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeakProof", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lip", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Bundle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bundle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Folding", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Folding", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SealedFirst", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealedFirst", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SealingID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealingID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Color", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Color", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ChemicalAdditives", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChemicalAdditives", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SlipID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlipID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UVIMonths", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UVIMonths", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClarityID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClarityID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SpecialityResinsID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecialityResinsID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PartNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PartNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Predefined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Predefined", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CopiedFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CopiedFrom", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OwnerAccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerAccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoreTypeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoreTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SleeveColorId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SleeveColorId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CartonSizeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CartonSizeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RollsPerSkid", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RollsPerSkid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserRequest", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserRequest", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrintingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrintingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProductTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProductTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateTimeStamp", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeStamp", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateTimeStamp", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeStamp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Width", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Width", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gusset", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Gusset", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Length", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 4, "Length", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Gauge", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 8, 6, "Gauge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeaderSize", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 7, 4, "HeaderSize", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Microvents", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Microvents", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Holes", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Holes", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LeakProof", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LeakProof", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Lip", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lip", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Bundle", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Bundle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Folding", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Folding", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SealedFirst", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealedFirst", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SealingID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SealingID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Color", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Color", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ChemicalAdditives", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ChemicalAdditives", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SlipID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SlipID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UVIMonths", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UVIMonths", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClarityID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClarityID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SpecialityResinsID", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SpecialityResinsID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Comments", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PartNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PartNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PartNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PartNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Predefined", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Predefined", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CopiedFrom", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CopiedFrom", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OwnerAccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerAccountNumber", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OwnerAccountNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerAccountNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoreTypeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoreTypeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SleeveColorId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SleeveColorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CartonSizeId", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CartonSizeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RollsPerSkid", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RollsPerSkid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserRequest", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserRequest", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserRequest", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserRequest", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PrintingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrintingId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrintingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrintingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
			this._connection.ConnectionString = global::Plasticonnect.DataAccess.Properties.Settings.Default.connRegency;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, ProductTypeID, DateTimeStamp, Width, Gusset, Length, Gauge, HeaderSize, Microvents, Holes, LeakProof, Lip, Bundle, Folding, SealedFirst, SealingID, Color, ChemicalAdditives, SlipID, UVIMonths, ClarityID, SpecialityResinsID, Comments, PartNumber, Predefined, CopiedFrom, OwnerAccountNumber, CoreTypeId, SleeveColorId, CartonSizeId, RollsPerSkid, UserRequest, PrintingId FROM dbo.Products";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT ID, ProductTypeID, DateTimeStamp, Width, Gusset, Length, Gauge, HeaderSize, Microvents, Holes, LeakProof, Lip, Bundle, Folding, SealedFirst, SealingID, Color, ChemicalAdditives, SlipID, UVIMonths, ClarityID, SpecialityResinsID, Comments, PartNumber, Predefined, CopiedFrom, OwnerAccountNumber, CoreTypeId, SleeveColorId, CartonSizeId, RollsPerSkid, UserRequest, PrintingId FROM dbo.Products
where Id = @Id";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT ID, ProductTypeID, DateTimeStamp, Width, Gusset, Length, Gauge, HeaderSize, Microvents, Holes, LeakProof, Lip, Bundle, Folding, SealedFirst, SealingID, Color, ChemicalAdditives, SlipID, UVIMonths, ClarityID, SpecialityResinsID, Comments, PartNumber, Predefined, CopiedFrom, OwnerAccountNumber, CoreTypeId, SleeveColorId, CartonSizeId, RollsPerSkid, UserRequest, PrintingId FROM dbo.Products
where OwnerAccountNumber = @ownerAccountNumber and Predefined = 1
order by PartNumber";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ownerAccountNumber", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerAccountNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaProduct.ProductsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaProduct.ProductsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaProduct.ProductsDataTable dataTable = new SchemaProduct.ProductsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaProduct.ProductsDataTable GetDataById(int Id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Id));
            SchemaProduct.ProductsDataTable dataTable = new SchemaProduct.ProductsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaProduct.ProductsDataTable GetDataByOwnerAccountNumber(global::System.Nullable<int> ownerAccountNumber) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ownerAccountNumber.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ownerAccountNumber.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            SchemaProduct.ProductsDataTable dataTable = new SchemaProduct.ProductsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SchemaProduct.ProductsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SchemaProduct dataSet) {
            return this.Adapter.Update(dataSet, "Products");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_ID, 
                    int Original_ProductTypeID, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeStamp, 
                    decimal Original_Width, 
                    string Original_Gusset, 
                    decimal Original_Length, 
                    decimal Original_Gauge, 
                    decimal Original_HeaderSize, 
                    string Original_Microvents, 
                    string Original_Holes, 
                    bool Original_LeakProof, 
                    string Original_Lip, 
                    string Original_Bundle, 
                    string Original_Folding, 
                    short Original_SealedFirst, 
                    short Original_SealingID, 
                    string Original_Color, 
                    int Original_ChemicalAdditives, 
                    short Original_SlipID, 
                    byte Original_UVIMonths, 
                    short Original_ClarityID, 
                    short Original_SpecialityResinsID, 
                    string Original_Comments, 
                    string Original_PartNumber, 
                    bool Original_Predefined, 
                    int Original_CopiedFrom, 
                    global::System.Nullable<int> Original_OwnerAccountNumber, 
                    short Original_CoreTypeId, 
                    short Original_SleeveColorId, 
                    short Original_CartonSizeId, 
                    short Original_RollsPerSkid, 
                    string Original_UserRequest, 
                    global::System.Nullable<int> Original_PrintingId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ProductTypeID));
            if ((Original_DateTimeStamp.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_DateTimeStamp.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_Width));
            if ((Original_Gusset == null)) {
                throw new global::System.ArgumentNullException("Original_Gusset");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Gusset));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_Length));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_Gauge));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_HeaderSize));
            if ((Original_Microvents == null)) {
                throw new global::System.ArgumentNullException("Original_Microvents");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Microvents));
            }
            if ((Original_Holes == null)) {
                throw new global::System.ArgumentNullException("Original_Holes");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Holes));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_LeakProof));
            if ((Original_Lip == null)) {
                throw new global::System.ArgumentNullException("Original_Lip");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Lip));
            }
            if ((Original_Bundle == null)) {
                throw new global::System.ArgumentNullException("Original_Bundle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_Bundle));
            }
            if ((Original_Folding == null)) {
                throw new global::System.ArgumentNullException("Original_Folding");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Folding));
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((short)(Original_SealedFirst));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((short)(Original_SealingID));
            if ((Original_Color == null)) {
                throw new global::System.ArgumentNullException("Original_Color");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_Color));
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_ChemicalAdditives));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((short)(Original_SlipID));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((byte)(Original_UVIMonths));
            this.Adapter.DeleteCommand.Parameters[21].Value = ((short)(Original_ClarityID));
            this.Adapter.DeleteCommand.Parameters[22].Value = ((short)(Original_SpecialityResinsID));
            if ((Original_Comments == null)) {
                throw new global::System.ArgumentNullException("Original_Comments");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_Comments));
            }
            if ((Original_PartNumber == null)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_PartNumber));
            }
            this.Adapter.DeleteCommand.Parameters[26].Value = ((bool)(Original_Predefined));
            this.Adapter.DeleteCommand.Parameters[27].Value = ((int)(Original_CopiedFrom));
            if ((Original_OwnerAccountNumber.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((int)(Original_OwnerAccountNumber.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[30].Value = ((short)(Original_CoreTypeId));
            this.Adapter.DeleteCommand.Parameters[31].Value = ((short)(Original_SleeveColorId));
            this.Adapter.DeleteCommand.Parameters[32].Value = ((short)(Original_CartonSizeId));
            this.Adapter.DeleteCommand.Parameters[33].Value = ((short)(Original_RollsPerSkid));
            if ((Original_UserRequest == null)) {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[35].Value = ((string)(Original_UserRequest));
            }
            if ((Original_PrintingId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[37].Value = ((int)(Original_PrintingId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int ProductTypeID, 
                    global::System.Nullable<global::System.DateTime> DateTimeStamp, 
                    decimal Width, 
                    string Gusset, 
                    decimal Length, 
                    decimal Gauge, 
                    decimal HeaderSize, 
                    string Microvents, 
                    string Holes, 
                    bool LeakProof, 
                    string Lip, 
                    string Bundle, 
                    string Folding, 
                    short SealedFirst, 
                    short SealingID, 
                    string Color, 
                    int ChemicalAdditives, 
                    short SlipID, 
                    byte UVIMonths, 
                    short ClarityID, 
                    short SpecialityResinsID, 
                    string Comments, 
                    string PartNumber, 
                    bool Predefined, 
                    int CopiedFrom, 
                    global::System.Nullable<int> OwnerAccountNumber, 
                    short CoreTypeId, 
                    short SleeveColorId, 
                    short CartonSizeId, 
                    short RollsPerSkid, 
                    string UserRequest, 
                    global::System.Nullable<int> PrintingId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ProductTypeID));
            if ((DateTimeStamp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(DateTimeStamp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Width));
            if ((Gusset == null)) {
                throw new global::System.ArgumentNullException("Gusset");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Gusset));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Length));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Gauge));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(HeaderSize));
            if ((Microvents == null)) {
                throw new global::System.ArgumentNullException("Microvents");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Microvents));
            }
            if ((Holes == null)) {
                throw new global::System.ArgumentNullException("Holes");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Holes));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(LeakProof));
            if ((Lip == null)) {
                throw new global::System.ArgumentNullException("Lip");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Lip));
            }
            if ((Bundle == null)) {
                throw new global::System.ArgumentNullException("Bundle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Bundle));
            }
            if ((Folding == null)) {
                throw new global::System.ArgumentNullException("Folding");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Folding));
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((short)(SealedFirst));
            this.Adapter.InsertCommand.Parameters[14].Value = ((short)(SealingID));
            if ((Color == null)) {
                throw new global::System.ArgumentNullException("Color");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Color));
            }
            this.Adapter.InsertCommand.Parameters[16].Value = ((int)(ChemicalAdditives));
            this.Adapter.InsertCommand.Parameters[17].Value = ((short)(SlipID));
            this.Adapter.InsertCommand.Parameters[18].Value = ((byte)(UVIMonths));
            this.Adapter.InsertCommand.Parameters[19].Value = ((short)(ClarityID));
            this.Adapter.InsertCommand.Parameters[20].Value = ((short)(SpecialityResinsID));
            if ((Comments == null)) {
                throw new global::System.ArgumentNullException("Comments");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Comments));
            }
            if ((PartNumber == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(PartNumber));
            }
            this.Adapter.InsertCommand.Parameters[23].Value = ((bool)(Predefined));
            this.Adapter.InsertCommand.Parameters[24].Value = ((int)(CopiedFrom));
            if ((OwnerAccountNumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((int)(OwnerAccountNumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[26].Value = ((short)(CoreTypeId));
            this.Adapter.InsertCommand.Parameters[27].Value = ((short)(SleeveColorId));
            this.Adapter.InsertCommand.Parameters[28].Value = ((short)(CartonSizeId));
            this.Adapter.InsertCommand.Parameters[29].Value = ((short)(RollsPerSkid));
            if ((UserRequest == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(UserRequest));
            }
            if ((PrintingId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(PrintingId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ProductTypeID, 
                    global::System.Nullable<global::System.DateTime> DateTimeStamp, 
                    decimal Width, 
                    string Gusset, 
                    decimal Length, 
                    decimal Gauge, 
                    decimal HeaderSize, 
                    string Microvents, 
                    string Holes, 
                    bool LeakProof, 
                    string Lip, 
                    string Bundle, 
                    string Folding, 
                    short SealedFirst, 
                    short SealingID, 
                    string Color, 
                    int ChemicalAdditives, 
                    short SlipID, 
                    byte UVIMonths, 
                    short ClarityID, 
                    short SpecialityResinsID, 
                    string Comments, 
                    string PartNumber, 
                    bool Predefined, 
                    int CopiedFrom, 
                    global::System.Nullable<int> OwnerAccountNumber, 
                    short CoreTypeId, 
                    short SleeveColorId, 
                    short CartonSizeId, 
                    short RollsPerSkid, 
                    string UserRequest, 
                    global::System.Nullable<int> PrintingId, 
                    int Original_ID, 
                    int Original_ProductTypeID, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeStamp, 
                    decimal Original_Width, 
                    string Original_Gusset, 
                    decimal Original_Length, 
                    decimal Original_Gauge, 
                    decimal Original_HeaderSize, 
                    string Original_Microvents, 
                    string Original_Holes, 
                    bool Original_LeakProof, 
                    string Original_Lip, 
                    string Original_Bundle, 
                    string Original_Folding, 
                    short Original_SealedFirst, 
                    short Original_SealingID, 
                    string Original_Color, 
                    int Original_ChemicalAdditives, 
                    short Original_SlipID, 
                    byte Original_UVIMonths, 
                    short Original_ClarityID, 
                    short Original_SpecialityResinsID, 
                    string Original_Comments, 
                    string Original_PartNumber, 
                    bool Original_Predefined, 
                    int Original_CopiedFrom, 
                    global::System.Nullable<int> Original_OwnerAccountNumber, 
                    short Original_CoreTypeId, 
                    short Original_SleeveColorId, 
                    short Original_CartonSizeId, 
                    short Original_RollsPerSkid, 
                    string Original_UserRequest, 
                    global::System.Nullable<int> Original_PrintingId, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ProductTypeID));
            if ((DateTimeStamp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(DateTimeStamp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Width));
            if ((Gusset == null)) {
                throw new global::System.ArgumentNullException("Gusset");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Gusset));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Length));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Gauge));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(HeaderSize));
            if ((Microvents == null)) {
                throw new global::System.ArgumentNullException("Microvents");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Microvents));
            }
            if ((Holes == null)) {
                throw new global::System.ArgumentNullException("Holes");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Holes));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(LeakProof));
            if ((Lip == null)) {
                throw new global::System.ArgumentNullException("Lip");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Lip));
            }
            if ((Bundle == null)) {
                throw new global::System.ArgumentNullException("Bundle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Bundle));
            }
            if ((Folding == null)) {
                throw new global::System.ArgumentNullException("Folding");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Folding));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((short)(SealedFirst));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((short)(SealingID));
            if ((Color == null)) {
                throw new global::System.ArgumentNullException("Color");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Color));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(ChemicalAdditives));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((short)(SlipID));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((byte)(UVIMonths));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((short)(ClarityID));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((short)(SpecialityResinsID));
            if ((Comments == null)) {
                throw new global::System.ArgumentNullException("Comments");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Comments));
            }
            if ((PartNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(PartNumber));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(Predefined));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(CopiedFrom));
            if ((OwnerAccountNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(OwnerAccountNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((short)(CoreTypeId));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((short)(SleeveColorId));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((short)(CartonSizeId));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((short)(RollsPerSkid));
            if ((UserRequest == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(UserRequest));
            }
            if ((PrintingId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(PrintingId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_ProductTypeID));
            if ((Original_DateTimeStamp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((System.DateTime)(Original_DateTimeStamp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(Original_Width));
            if ((Original_Gusset == null)) {
                throw new global::System.ArgumentNullException("Original_Gusset");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_Gusset));
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(Original_Length));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(Original_Gauge));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(Original_HeaderSize));
            if ((Original_Microvents == null)) {
                throw new global::System.ArgumentNullException("Original_Microvents");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_Microvents));
            }
            if ((Original_Holes == null)) {
                throw new global::System.ArgumentNullException("Original_Holes");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_Holes));
            }
            this.Adapter.UpdateCommand.Parameters[43].Value = ((bool)(Original_LeakProof));
            if ((Original_Lip == null)) {
                throw new global::System.ArgumentNullException("Original_Lip");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_Lip));
            }
            if ((Original_Bundle == null)) {
                throw new global::System.ArgumentNullException("Original_Bundle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_Bundle));
            }
            if ((Original_Folding == null)) {
                throw new global::System.ArgumentNullException("Original_Folding");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_Folding));
            }
            this.Adapter.UpdateCommand.Parameters[47].Value = ((short)(Original_SealedFirst));
            this.Adapter.UpdateCommand.Parameters[48].Value = ((short)(Original_SealingID));
            if ((Original_Color == null)) {
                throw new global::System.ArgumentNullException("Original_Color");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_Color));
            }
            this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(Original_ChemicalAdditives));
            this.Adapter.UpdateCommand.Parameters[51].Value = ((short)(Original_SlipID));
            this.Adapter.UpdateCommand.Parameters[52].Value = ((byte)(Original_UVIMonths));
            this.Adapter.UpdateCommand.Parameters[53].Value = ((short)(Original_ClarityID));
            this.Adapter.UpdateCommand.Parameters[54].Value = ((short)(Original_SpecialityResinsID));
            if ((Original_Comments == null)) {
                throw new global::System.ArgumentNullException("Original_Comments");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_Comments));
            }
            if ((Original_PartNumber == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_PartNumber));
            }
            this.Adapter.UpdateCommand.Parameters[58].Value = ((bool)(Original_Predefined));
            this.Adapter.UpdateCommand.Parameters[59].Value = ((int)(Original_CopiedFrom));
            if ((Original_OwnerAccountNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((int)(Original_OwnerAccountNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[62].Value = ((short)(Original_CoreTypeId));
            this.Adapter.UpdateCommand.Parameters[63].Value = ((short)(Original_SleeveColorId));
            this.Adapter.UpdateCommand.Parameters[64].Value = ((short)(Original_CartonSizeId));
            this.Adapter.UpdateCommand.Parameters[65].Value = ((short)(Original_RollsPerSkid));
            if ((Original_UserRequest == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_UserRequest));
            }
            if ((Original_PrintingId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((int)(Original_PrintingId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[70].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ProductTypeID, 
                    global::System.Nullable<global::System.DateTime> DateTimeStamp, 
                    decimal Width, 
                    string Gusset, 
                    decimal Length, 
                    decimal Gauge, 
                    decimal HeaderSize, 
                    string Microvents, 
                    string Holes, 
                    bool LeakProof, 
                    string Lip, 
                    string Bundle, 
                    string Folding, 
                    short SealedFirst, 
                    short SealingID, 
                    string Color, 
                    int ChemicalAdditives, 
                    short SlipID, 
                    byte UVIMonths, 
                    short ClarityID, 
                    short SpecialityResinsID, 
                    string Comments, 
                    string PartNumber, 
                    bool Predefined, 
                    int CopiedFrom, 
                    global::System.Nullable<int> OwnerAccountNumber, 
                    short CoreTypeId, 
                    short SleeveColorId, 
                    short CartonSizeId, 
                    short RollsPerSkid, 
                    string UserRequest, 
                    global::System.Nullable<int> PrintingId, 
                    int Original_ID, 
                    int Original_ProductTypeID, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeStamp, 
                    decimal Original_Width, 
                    string Original_Gusset, 
                    decimal Original_Length, 
                    decimal Original_Gauge, 
                    decimal Original_HeaderSize, 
                    string Original_Microvents, 
                    string Original_Holes, 
                    bool Original_LeakProof, 
                    string Original_Lip, 
                    string Original_Bundle, 
                    string Original_Folding, 
                    short Original_SealedFirst, 
                    short Original_SealingID, 
                    string Original_Color, 
                    int Original_ChemicalAdditives, 
                    short Original_SlipID, 
                    byte Original_UVIMonths, 
                    short Original_ClarityID, 
                    short Original_SpecialityResinsID, 
                    string Original_Comments, 
                    string Original_PartNumber, 
                    bool Original_Predefined, 
                    int Original_CopiedFrom, 
                    global::System.Nullable<int> Original_OwnerAccountNumber, 
                    short Original_CoreTypeId, 
                    short Original_SleeveColorId, 
                    short Original_CartonSizeId, 
                    short Original_RollsPerSkid, 
                    string Original_UserRequest, 
                    global::System.Nullable<int> Original_PrintingId) {
            return this.Update(ProductTypeID, DateTimeStamp, Width, Gusset, Length, Gauge, HeaderSize, Microvents, Holes, LeakProof, Lip, Bundle, Folding, SealedFirst, SealingID, Color, ChemicalAdditives, SlipID, UVIMonths, ClarityID, SpecialityResinsID, Comments, PartNumber, Predefined, CopiedFrom, OwnerAccountNumber, CoreTypeId, SleeveColorId, CartonSizeId, RollsPerSkid, UserRequest, PrintingId, Original_ID, Original_ProductTypeID, Original_DateTimeStamp, Original_Width, Original_Gusset, Original_Length, Original_Gauge, Original_HeaderSize, Original_Microvents, Original_Holes, Original_LeakProof, Original_Lip, Original_Bundle, Original_Folding, Original_SealedFirst, Original_SealingID, Original_Color, Original_ChemicalAdditives, Original_SlipID, Original_UVIMonths, Original_ClarityID, Original_SpecialityResinsID, Original_Comments, Original_PartNumber, Original_Predefined, Original_CopiedFrom, Original_OwnerAccountNumber, Original_CoreTypeId, Original_SleeveColorId, Original_CartonSizeId, Original_RollsPerSkid, Original_UserRequest, Original_PrintingId, Original_ID);
        }
    }
}

#pragma warning restore 1591